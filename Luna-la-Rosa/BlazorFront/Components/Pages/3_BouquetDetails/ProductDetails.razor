@page "/product-details/{id:int}"
@using BLL.DTO.Bouquet
@using BLL.DTO.AddOn
@using BlazorFront.Services.Interfaces
@using DAL.Helpers.Params
@inject IBouquetService BouquetService
@inject IAddOnService AddOnService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<section class="product-details">
    @if (IsLoading)
    {
        <p>Завантаження...</p>
    }
    else if (Bouquet != null)
    {
        <div class="product-info">
            <img src="data:image/png;base64,@Convert.ToBase64String(Bouquet.Image)" alt="@Bouquet.Name">
            <div class="details">
                <h2>@Bouquet.Name</h2>
                <p class="price">@($"{Bouquet.Price:C} грн")</p>
                <p>Склад букета:</p>
                <ul>
                    @foreach (var flower in Bouquet.Flowers)
                    {
                        <li>@($"{flower.Quantity} x {flower.Flower.Name}")</li>
                    }
                </ul>
                <h4>Подарунки до букету</h4>
                <div class="gift-options">
                    @if (Bouquet.AddOns != null && Bouquet.AddOns.Any())
                    {
                        @foreach (var addOn in Bouquet.AddOns)
                        {
                            <img src="data:image/png;base64,@Convert.ToBase64String(addOn.AddOn.Image)" alt="@addOn.AddOn.Name" title="@addOn.AddOn.Name">
                        }
                    }
                    else
                    {
                        <p>Додатків не знайдено</p>
                    }
                </div>
                <h4>Додати подарунок:</h4>
                <div class="gift-options">
                    <img src="icons/balloon.png" alt="Balloon" @onclick="OpenBalloonModal">
                    <img src="icons/sweets-box.png" alt="Sweets Box" @onclick="OpenSweetsModal">
                    <img src="icons/card.png" alt="Card" @onclick="OpenCardModal">
                </div>
                <div class="product-actions">
                    <button class="add-to-cart">Додати у кошик</button>
                    <button class="order-now">Замовити зараз</button>
                </div>
            </div>
        </div>
    }
</section>

<!-- The most popular Bouquets Section -->
<section class="suggestions">
    <h3>Букети, які вам також сподобаються</h3>
    @if (PopularBouquets != null && PopularBouquets.Any())
    {
        <div class="suggested-items">
            @foreach (var bouquet in PopularBouquets)
            {
                <div class="bouquet-item" @onclick="() => NavigateToDetails(bouquet.Id)">
                    <img src="data:image/png;base64,@Convert.ToBase64String(bouquet.Image)" alt="@bouquet.Name">
                    <div class="bouquet-info">
                        <p class="bouquet-name">@bouquet.Name</p>
                        <p class="bouquet-price">@($"{bouquet.Price:C} грн")</p>
                    </div>
                    <p class="bouquet-desc">@bouquet.Description</p>
                    <button class="add-to-cart-btn">У кошик</button>
                </div>
            }
        </div>
    }
    else
    {
        <p>Не вдалося завантажити популярні букети</p>
    }
</section>

<!-- Modal for Add-Ons -->
@if (IsModalVisible)
{
    <div class="modal">
        <div class="modal-content">
            <h2>@ModalTitle</h2>
            <ul>
                @foreach (var addOn in CurrentAddOns)
                {
                    <li>
                        <img src="data:image/png;base64,@Convert.ToBase64String(addOn.Image)" alt="@addOn.Name" title="@addOn.Name">
                        <p>@addOn.Name</p>
                    </li>
                }
            </ul>
            <button @onclick="CloseModal">Закрити</button>
        </div>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }

    private bool IsLoading { get; set; } = true;
    private BouquetDto? Bouquet { get; set; }
    private List<BouquetDto> PopularBouquets { get; set; } = new();
    private List<AddOnDto> CurrentAddOns { get; set; } = new();
    private bool IsModalVisible { get; set; } = false;
    private string ModalTitle { get; set; } = "";

    private void NavigateToDetails(int bouquetId)
    {
        NavigationManager.NavigateTo($"/product-details/{bouquetId}");
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadBouquetDetails();
        await LoadPopularBouquets();
    }

    private async Task LoadBouquetDetails()
    {
        try
        {
            Bouquet = await BouquetService.GetBouquetByIdAsync(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading bouquet details: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task LoadPopularBouquets()
    {
        try
        {
            var bouquetParams = new BouquetParams
                {
                    OrderBy = "PopularityScore",
                    PageSize = 3, // Тільки три букети
                    PageNumber = 1
                };

            var popularBouquets = await BouquetService.GetAllBouquetsAsync(bouquetParams);
            PopularBouquets = popularBouquets.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading popular bouquets: {ex.Message}");
        }
    }

    private async Task OpenBalloonModal()
    {
        ModalTitle = "Виберіть кульки";
        IsModalVisible = true; // Відкриваємо модальне вікно перед завантаженням даних
        await LoadAddOns("Balloon");
    }

    private async Task OpenSweetsModal()
    {
        ModalTitle = "Виберіть цукерки";
        IsModalVisible = true; // Відкриваємо модальне вікно перед завантаженням даних
        await LoadAddOns("Sweets");
    }

    private async Task OpenCardModal()
    {
        ModalTitle = "Виберіть картку";
        IsModalVisible = true; // Відкриваємо модальне вікно перед завантаженням даних
        await LoadAddOns("PostCard");
    }

    private async Task LoadAddOns(string type)
    {
        try
        {
            var groupedAddOns = await AddOnService.GetAddOnsGroupedByTypeAsync();
            if (groupedAddOns.ContainsKey(type))
            {
                CurrentAddOns = groupedAddOns[type];
            }
            else
            {
                CurrentAddOns = new List<AddOnDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading add-ons: {ex.Message}");
        }
    }


    private void CloseModal()
    {
        IsModalVisible = false;
        CurrentAddOns = new List<AddOnDto>();
    }

    private void AddAddOnToBouquet(AddOnDto addOn)
    {
        // Add logic to associate add-on with the bouquet
        Console.WriteLine($"Додано подарунок: {addOn.Name}");
        CloseModal();
    }
}

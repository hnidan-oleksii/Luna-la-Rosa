// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(LunaContext))]
    partial class LunaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.AddOn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("BYTEA")
                        .HasColumnName("image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("NUMERIC(10, 2)")
                        .HasColumnName("price");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_add_ons");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_add_ons_type_id");

                    b.ToTable("add_ons", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.AddOnType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_add_on_types");

                    b.ToTable("add_on_types", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Bouquet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("description");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("BYTEA")
                        .HasColumnName("image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("MainColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("main_color");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<int>("PopularityScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("popularity_score");

                    b.Property<decimal>("Price")
                        .HasColumnType("NUMERIC(10, 2)")
                        .HasColumnName("price");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("size");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_bouquets");

                    b.HasIndex("MainColor")
                        .HasDatabaseName("ix_bouquets_main_color");

                    b.HasIndex("Size")
                        .HasDatabaseName("ix_bouquets_size");

                    b.ToTable("bouquets", null, t =>
                        {
                            t.HasCheckConstraint("CK_Bouquet_Size", "size IN ('Small', 'Medium', 'Large')");
                        });
                });

            modelBuilder.Entity("DAL.Entities.BouquetAddOn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddOnId")
                        .HasColumnType("integer")
                        .HasColumnName("add_on_id");

                    b.Property<int?>("BouquetId")
                        .HasColumnType("integer")
                        .HasColumnName("bouquet_id");

                    b.Property<int?>("CustomBouquetId")
                        .HasColumnType("integer")
                        .HasColumnName("custom_bouquet_id");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_bouquet_add_ons");

                    b.HasIndex("AddOnId")
                        .HasDatabaseName("ix_bouquet_add_ons_add_on_id");

                    b.HasIndex("BouquetId")
                        .HasDatabaseName("ix_bouquet_add_ons_bouquet_id");

                    b.HasIndex("CustomBouquetId")
                        .HasDatabaseName("ix_bouquet_add_ons_custom_bouquet_id");

                    b.ToTable("bouquet_add_ons", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.BouquetCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category_name");

                    b.HasKey("Id")
                        .HasName("pk_bouquet_categories");

                    b.ToTable("bouquet_categories", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.BouquetCategoryBouquet", b =>
                {
                    b.Property<int>("BouquetId")
                        .HasColumnType("integer")
                        .HasColumnName("bouquet_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.HasKey("BouquetId", "CategoryId")
                        .HasName("pk_bouquet_category_bouquets");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_bouquet_category_bouquets_category_id");

                    b.ToTable("bouquet_category_bouquets", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.BouquetFlower", b =>
                {
                    b.Property<int>("BouquetId")
                        .HasColumnType("integer")
                        .HasColumnName("bouquet_id");

                    b.Property<int>("FlowerId")
                        .HasColumnType("integer")
                        .HasColumnName("flower_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("BouquetId", "FlowerId")
                        .HasName("pk_bouquet_flowers");

                    b.HasIndex("FlowerId")
                        .HasDatabaseName("ix_bouquet_flowers_flower_id");

                    b.ToTable("bouquet_flowers", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BouquetId")
                        .HasColumnType("integer")
                        .HasColumnName("bouquet_id");

                    b.Property<int>("CartId")
                        .HasColumnType("integer")
                        .HasColumnName("cart_id");

                    b.Property<int?>("CustomBouquetId")
                        .HasColumnType("integer")
                        .HasColumnName("custom_bouquet_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("NUMERIC(10, 2)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_cart_items");

                    b.HasIndex("BouquetId")
                        .HasDatabaseName("ix_cart_items_bouquet_id");

                    b.HasIndex("CartId")
                        .HasDatabaseName("ix_cart_items_cart_id");

                    b.HasIndex("CustomBouquetId")
                        .HasDatabaseName("ix_cart_items_custom_bouquet_id");

                    b.ToTable("cart_items", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.CartItemAddOn", b =>
                {
                    b.Property<int>("CartItemId")
                        .HasColumnType("integer")
                        .HasColumnName("cart_item_id");

                    b.Property<int>("AddOnId")
                        .HasColumnType("integer")
                        .HasColumnName("add_on_id");

                    b.Property<string>("CardNote")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("card_note");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("CartItemId", "AddOnId")
                        .HasName("pk_cart_item_add_ons");

                    b.HasIndex("AddOnId")
                        .HasDatabaseName("ix_cart_item_add_ons_add_on_id");

                    b.ToTable("cart_item_add_ons", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.CustomBouquet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("NUMERIC(10, 2)")
                        .HasColumnName("total_price");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_custom_bouquets");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_custom_bouquets_user_id");

                    b.ToTable("custom_bouquets", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.CustomBouquetFlower", b =>
                {
                    b.Property<int>("CustomBouquetId")
                        .HasColumnType("integer")
                        .HasColumnName("custom_bouquet_id");

                    b.Property<int>("FlowerId")
                        .HasColumnType("integer")
                        .HasColumnName("flower_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("CustomBouquetId", "FlowerId")
                        .HasName("pk_custom_bouquet_flowers");

                    b.HasIndex("FlowerId")
                        .HasDatabaseName("ix_custom_bouquet_flowers_flower_id");

                    b.ToTable("custom_bouquet_flowers", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Flower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("available_quantity");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("BYTEA")
                        .HasColumnName("image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("NUMERIC(10, 2)")
                        .HasColumnName("price");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_flowers");

                    b.HasIndex("Color")
                        .HasDatabaseName("ix_flowers_color");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_flowers_type_id");

                    b.ToTable("flowers", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.FlowerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_flower_types");

                    b.ToTable("flower_types", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("delivery_address");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivery_date");

                    b.Property<decimal>("DeliveryPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("delivery_price");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_method");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("NUMERIC(10, 2)")
                        .HasColumnName("total_price");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_orders_status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.ToTable("orders", null, t =>
                        {
                            t.HasCheckConstraint("CK_Order_PaymentMethod", "payment_method IN ('Card', 'Cash on Delivery')");
                        });
                });

            modelBuilder.Entity("DAL.Entities.OrderAddOn", b =>
                {
                    b.Property<int>("OrderBouquetId")
                        .HasColumnType("integer")
                        .HasColumnName("order_bouquet_id");

                    b.Property<int>("AddOnId")
                        .HasColumnType("integer")
                        .HasColumnName("add_on_id");

                    b.Property<string>("CardNote")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("card_note");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("OrderBouquetId", "AddOnId")
                        .HasName("pk_order_add_ons");

                    b.HasIndex("AddOnId")
                        .HasDatabaseName("ix_order_add_ons_add_on_id");

                    b.ToTable("order_add_ons", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.OrderBouquet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BouquetId")
                        .HasColumnType("integer")
                        .HasColumnName("bouquet_id");

                    b.Property<int?>("CustomBouquetId")
                        .HasColumnType("integer")
                        .HasColumnName("custom_bouquet_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("NUMERIC(10, 2)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_order_bouquets");

                    b.HasIndex("BouquetId")
                        .HasDatabaseName("ix_order_bouquets_bouquet_id");

                    b.HasIndex("CustomBouquetId")
                        .HasDatabaseName("ix_order_bouquets_custom_bouquet_id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_bouquets_order_id");

                    b.ToTable("order_bouquets", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("NUMERIC(10, 2)")
                        .HasColumnName("amount");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_method");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("transaction_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasDatabaseName("ix_payments_order_id");

                    b.ToTable("payments", null, t =>
                        {
                            t.HasCheckConstraint("CK_Payment_PaymentMethod", "payment_method IN ('Card', 'Cash on Delivery')");
                        });
                });

            modelBuilder.Entity("DAL.Entities.ShoppingCart", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId")
                        .HasName("pk_shopping_carts");

                    b.ToTable("shopping_carts", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("User")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.AddOn", b =>
                {
                    b.HasOne("DAL.Entities.AddOnType", "Type")
                        .WithMany("AddOn")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_add_ons_add_on_types_type_id");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DAL.Entities.BouquetAddOn", b =>
                {
                    b.HasOne("DAL.Entities.AddOn", "AddOn")
                        .WithMany("BouquetAddOns")
                        .HasForeignKey("AddOnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_bouquet_add_ons_add_ons_add_on_id");

                    b.HasOne("DAL.Entities.Bouquet", "Bouquet")
                        .WithMany("BouquetAddOns")
                        .HasForeignKey("BouquetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_bouquet_add_ons_bouquets_bouquet_id");

                    b.HasOne("DAL.Entities.CustomBouquet", "CustomBouquet")
                        .WithMany("CustomBouquetAddOns")
                        .HasForeignKey("CustomBouquetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_bouquet_add_ons_custom_bouquets_custom_bouquet_id");

                    b.Navigation("AddOn");

                    b.Navigation("Bouquet");

                    b.Navigation("CustomBouquet");
                });

            modelBuilder.Entity("DAL.Entities.BouquetCategoryBouquet", b =>
                {
                    b.HasOne("DAL.Entities.Bouquet", "Bouquet")
                        .WithMany("BouquetCategories")
                        .HasForeignKey("BouquetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bouquet_category_bouquets_bouquets_bouquet_id");

                    b.HasOne("DAL.Entities.BouquetCategory", "Category")
                        .WithMany("Bouquets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bouquet_category_bouquets_bouquet_categories_category_id");

                    b.Navigation("Bouquet");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Entities.BouquetFlower", b =>
                {
                    b.HasOne("DAL.Entities.Bouquet", "Bouquet")
                        .WithMany("BouquetFlowers")
                        .HasForeignKey("BouquetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bouquet_flowers_bouquets_bouquet_id");

                    b.HasOne("DAL.Entities.Flower", "Flower")
                        .WithMany("BouquetFlowers")
                        .HasForeignKey("FlowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bouquet_flowers_flowers_flower_id");

                    b.Navigation("Bouquet");

                    b.Navigation("Flower");
                });

            modelBuilder.Entity("DAL.Entities.CartItem", b =>
                {
                    b.HasOne("DAL.Entities.Bouquet", "Bouquet")
                        .WithMany("CartItems")
                        .HasForeignKey("BouquetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_cart_items_bouquets_bouquet_id");

                    b.HasOne("DAL.Entities.ShoppingCart", "ShoppingCart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cart_items_shopping_carts_cart_id");

                    b.HasOne("DAL.Entities.CustomBouquet", "CustomBouquet")
                        .WithMany("CartItems")
                        .HasForeignKey("CustomBouquetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_cart_items_custom_bouquets_custom_bouquet_id");

                    b.Navigation("Bouquet");

                    b.Navigation("CustomBouquet");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("DAL.Entities.CartItemAddOn", b =>
                {
                    b.HasOne("DAL.Entities.AddOn", "AddOn")
                        .WithMany("CartItems")
                        .HasForeignKey("AddOnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cart_item_add_ons_add_ons_add_on_id");

                    b.HasOne("DAL.Entities.CartItem", "CartItem")
                        .WithMany("AddOns")
                        .HasForeignKey("CartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cart_item_add_ons_cart_items_cart_item_id");

                    b.Navigation("AddOn");

                    b.Navigation("CartItem");
                });

            modelBuilder.Entity("DAL.Entities.CustomBouquet", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("CustomBouquets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_custom_bouquets_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.CustomBouquetFlower", b =>
                {
                    b.HasOne("DAL.Entities.CustomBouquet", "CustomBouquet")
                        .WithMany("CustomBouquetFlowers")
                        .HasForeignKey("CustomBouquetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_custom_bouquet_flowers_custom_bouquets_custom_bouquet_id");

                    b.HasOne("DAL.Entities.Flower", "Flower")
                        .WithMany("CustomBouquetFlowers")
                        .HasForeignKey("FlowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_custom_bouquet_flowers_flowers_flower_id");

                    b.Navigation("CustomBouquet");

                    b.Navigation("Flower");
                });

            modelBuilder.Entity("DAL.Entities.Flower", b =>
                {
                    b.HasOne("DAL.Entities.FlowerType", "Type")
                        .WithMany("Flower")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_flowers_flower_types_type_id");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.OrderAddOn", b =>
                {
                    b.HasOne("DAL.Entities.AddOn", "AddOn")
                        .WithMany("OrderBouquets")
                        .HasForeignKey("AddOnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order_add_ons_add_ons_add_on_id");

                    b.HasOne("DAL.Entities.OrderBouquet", "OrderBouquet")
                        .WithMany("AddOns")
                        .HasForeignKey("OrderBouquetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_add_ons_order_bouquets_order_bouquet_id");

                    b.Navigation("AddOn");

                    b.Navigation("OrderBouquet");
                });

            modelBuilder.Entity("DAL.Entities.OrderBouquet", b =>
                {
                    b.HasOne("DAL.Entities.Bouquet", "Bouquet")
                        .WithMany("OrderBouquets")
                        .HasForeignKey("BouquetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_order_bouquets_bouquets_bouquet_id");

                    b.HasOne("DAL.Entities.CustomBouquet", "CustomBouquet")
                        .WithMany("OrderBouquets")
                        .HasForeignKey("CustomBouquetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_order_bouquets_custom_bouquets_custom_bouquet_id");

                    b.HasOne("DAL.Entities.Order", "Order")
                        .WithMany("OrderBouquets")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_bouquets_orders_order_id");

                    b.Navigation("Bouquet");

                    b.Navigation("CustomBouquet");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DAL.Entities.Payment", b =>
                {
                    b.HasOne("DAL.Entities.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("DAL.Entities.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_payments_orders_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DAL.Entities.ShoppingCart", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("DAL.Entities.ShoppingCart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shopping_carts_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.AddOn", b =>
                {
                    b.Navigation("BouquetAddOns");

                    b.Navigation("CartItems");

                    b.Navigation("OrderBouquets");
                });

            modelBuilder.Entity("DAL.Entities.AddOnType", b =>
                {
                    b.Navigation("AddOn");
                });

            modelBuilder.Entity("DAL.Entities.Bouquet", b =>
                {
                    b.Navigation("BouquetAddOns");

                    b.Navigation("BouquetCategories");

                    b.Navigation("BouquetFlowers");

                    b.Navigation("CartItems");

                    b.Navigation("OrderBouquets");
                });

            modelBuilder.Entity("DAL.Entities.BouquetCategory", b =>
                {
                    b.Navigation("Bouquets");
                });

            modelBuilder.Entity("DAL.Entities.CartItem", b =>
                {
                    b.Navigation("AddOns");
                });

            modelBuilder.Entity("DAL.Entities.CustomBouquet", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("CustomBouquetAddOns");

                    b.Navigation("CustomBouquetFlowers");

                    b.Navigation("OrderBouquets");
                });

            modelBuilder.Entity("DAL.Entities.Flower", b =>
                {
                    b.Navigation("BouquetFlowers");

                    b.Navigation("CustomBouquetFlowers");
                });

            modelBuilder.Entity("DAL.Entities.FlowerType", b =>
                {
                    b.Navigation("Flower");
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.Navigation("OrderBouquets");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("DAL.Entities.OrderBouquet", b =>
                {
                    b.Navigation("AddOns");
                });

            modelBuilder.Entity("DAL.Entities.ShoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("CustomBouquets");

                    b.Navigation("Orders");

                    b.Navigation("ShoppingCart");
                });
#pragma warning restore 612, 618
        }
    }
}

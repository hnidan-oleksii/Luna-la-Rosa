// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(LunaContext))]
    partial class LunaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.AddOn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("BYTEA")
                        .HasColumnName("image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("NUMERIC(10, 2)")
                        .HasColumnName("price");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_add_ons");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_add_ons_type_id");

                    b.ToTable("add_ons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 7, 25, 10, 42, 38, 91, DateTimeKind.Utc).AddTicks(442),
                            Image = new byte[] { 151, 228, 163, 149, 207, 255, 70, 105, 156, 115, 196, 161, 205, 16, 52, 19, 91, 78, 163, 111, 132, 165, 74, 223, 122, 14, 160, 156, 227, 193, 23, 108, 228, 142, 130, 78, 2, 33, 190, 15, 59, 83, 88, 240, 163, 40, 24, 75, 233, 145, 235, 129, 227, 18, 188, 241, 154, 196, 26, 193, 94, 169, 134, 218, 91, 87, 189, 63, 142, 230, 16, 57, 143, 147, 52, 48, 77, 90, 60, 82, 246, 85, 179, 81, 214, 149, 137, 209, 210, 144, 180, 62, 7, 253, 177, 146, 205, 125, 148, 75 },
                            IsDeleted = false,
                            Name = "Ergonomic Granite Cheese",
                            Price = 13.492858981943158m,
                            TypeId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 3, 9, 9, 20, 22, 126, DateTimeKind.Utc).AddTicks(778),
                            Image = new byte[] { 185, 227, 111, 124, 56, 152, 183, 221, 32, 11, 193, 22, 30, 236, 46, 240, 189, 22, 70, 242, 169, 230, 147, 108, 98, 105, 51, 239, 133, 90, 185, 10, 83, 176, 245, 168, 71, 129, 47, 255, 114, 188, 101, 43, 174, 82, 135, 80, 29, 184, 180, 125, 127, 163, 122, 210, 79, 3, 25, 206, 100, 199, 87, 198, 81, 182, 194, 109, 247, 134, 168, 60, 230, 70, 128, 237, 129, 104, 189, 16, 226, 227, 209, 204, 165, 60, 139, 176, 54, 34, 88, 67, 103, 97, 155, 170, 100, 159, 217, 247 },
                            IsDeleted = false,
                            Name = "Fantastic Wooden Chips",
                            Price = 3.071088037486689m,
                            TypeId = 4
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 10, 23, 5, 58, 6, 161, DateTimeKind.Utc).AddTicks(369),
                            Image = new byte[] { 219, 227, 58, 99, 160, 50, 39, 80, 164, 163, 189, 140, 110, 200, 39, 204, 31, 222, 234, 117, 207, 39, 221, 248, 74, 197, 199, 65, 39, 242, 91, 168, 195, 210, 103, 1, 139, 224, 160, 240, 169, 36, 114, 102, 185, 124, 247, 84, 82, 223, 125, 120, 27, 51, 56, 179, 5, 66, 24, 219, 107, 230, 41, 177, 71, 21, 200, 155, 97, 37, 64, 62, 61, 249, 204, 171, 181, 119, 62, 205, 206, 114, 239, 71, 116, 227, 140, 144, 154, 179, 252, 72, 199, 197, 133, 195, 250, 193, 31, 164 },
                            IsDeleted = false,
                            Name = "Handcrafted Fresh Mouse",
                            Price = 11.649317093030239m,
                            TypeId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 6, 7, 3, 35, 50, 195, DateTimeKind.Utc).AddTicks(9945),
                            Image = new byte[] { 253, 226, 6, 74, 8, 204, 152, 196, 39, 58, 186, 1, 191, 164, 32, 168, 129, 166, 141, 249, 245, 104, 39, 132, 50, 32, 90, 147, 201, 139, 253, 70, 51, 245, 218, 91, 207, 64, 17, 225, 224, 140, 127, 161, 196, 166, 102, 89, 134, 6, 70, 115, 184, 195, 245, 148, 187, 129, 24, 232, 113, 4, 251, 156, 60, 116, 206, 202, 202, 197, 216, 65, 148, 172, 24, 104, 232, 133, 191, 139, 186, 0, 13, 194, 68, 138, 142, 111, 255, 69, 160, 78, 40, 41, 111, 219, 145, 227, 100, 80 },
                            IsDeleted = false,
                            Name = "Tasty Rubber Shirt",
                            Price = 1.2275461485737681m,
                            TypeId = 5
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 21, 2, 13, 34, 230, DateTimeKind.Utc).AddTicks(9528),
                            Image = new byte[] { 30, 226, 209, 49, 113, 101, 9, 56, 171, 210, 183, 118, 16, 128, 26, 132, 228, 110, 48, 124, 26, 169, 112, 16, 26, 124, 237, 230, 107, 35, 159, 228, 162, 23, 76, 181, 20, 159, 130, 209, 23, 245, 140, 220, 207, 208, 213, 94, 186, 46, 16, 110, 84, 83, 179, 117, 113, 193, 23, 245, 120, 35, 204, 135, 50, 210, 212, 248, 52, 100, 112, 68, 235, 95, 100, 37, 28, 148, 65, 73, 166, 143, 43, 60, 19, 49, 143, 79, 99, 215, 67, 83, 136, 141, 89, 244, 40, 4, 170, 252 },
                            IsDeleted = false,
                            Name = "Gorgeous Concrete Tuna",
                            Price = 9.805775204117301m,
                            TypeId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 9, 4, 22, 51, 18, 265, DateTimeKind.Utc).AddTicks(9095),
                            Image = new byte[] { 64, 225, 157, 24, 217, 255, 122, 171, 46, 106, 179, 236, 96, 92, 19, 96, 70, 55, 212, 255, 64, 234, 186, 157, 1, 215, 129, 56, 13, 187, 66, 130, 18, 57, 191, 15, 88, 255, 243, 194, 78, 93, 153, 23, 219, 251, 69, 98, 238, 85, 217, 105, 240, 227, 113, 86, 39, 0, 22, 2, 126, 65, 158, 114, 40, 49, 217, 39, 157, 4, 8, 70, 67, 18, 177, 227, 80, 162, 194, 6, 145, 30, 73, 183, 226, 216, 145, 46, 199, 104, 231, 88, 232, 241, 67, 12, 190, 38, 239, 169 },
                            IsDeleted = false,
                            Name = "Awesome Frozen Pizza",
                            Price = 18.384004259660832m,
                            TypeId = 5
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 4, 19, 20, 29, 2, 300, DateTimeKind.Utc).AddTicks(8663),
                            Image = new byte[] { 98, 225, 104, 255, 65, 153, 234, 31, 178, 1, 176, 97, 177, 56, 13, 60, 168, 255, 119, 130, 102, 42, 4, 41, 233, 50, 20, 139, 175, 84, 228, 31, 130, 91, 49, 104, 156, 95, 101, 178, 132, 197, 166, 82, 230, 37, 180, 103, 34, 124, 162, 100, 141, 115, 47, 55, 221, 63, 22, 15, 133, 95, 112, 94, 29, 144, 223, 85, 6, 164, 160, 73, 154, 196, 253, 160, 132, 177, 67, 196, 125, 172, 104, 50, 177, 127, 146, 14, 44, 250, 139, 93, 72, 85, 45, 37, 85, 72, 53, 85 },
                            IsDeleted = false,
                            Name = "Refined Metal Car",
                            Price = 7.962233315204382m,
                            TypeId = 2
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 12, 3, 19, 6, 46, 335, DateTimeKind.Utc).AddTicks(8228),
                            Image = new byte[] { 132, 224, 52, 230, 170, 51, 91, 147, 53, 153, 173, 215, 1, 20, 6, 24, 10, 199, 26, 5, 139, 107, 77, 181, 209, 142, 167, 221, 81, 236, 134, 189, 241, 125, 164, 194, 224, 190, 214, 163, 187, 46, 179, 141, 241, 79, 36, 108, 87, 163, 108, 95, 41, 3, 237, 24, 146, 126, 21, 28, 139, 126, 65, 73, 19, 239, 229, 132, 112, 67, 55, 76, 241, 119, 73, 93, 184, 191, 196, 130, 105, 59, 134, 173, 128, 38, 148, 238, 144, 139, 47, 98, 169, 186, 23, 61, 236, 106, 122, 1 },
                            IsDeleted = false,
                            Name = "Rustic Plastic Ball",
                            Price = 16.540462370747913m,
                            TypeId = 5
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 7, 18, 15, 44, 30, 370, DateTimeKind.Utc).AddTicks(7793),
                            Image = new byte[] { 166, 223, 255, 206, 18, 204, 204, 6, 185, 49, 169, 76, 82, 240, 255, 245, 109, 143, 190, 136, 177, 172, 151, 66, 185, 233, 58, 47, 243, 132, 40, 91, 97, 159, 23, 28, 37, 30, 71, 147, 242, 150, 192, 201, 252, 121, 147, 113, 139, 202, 53, 90, 197, 147, 170, 249, 72, 189, 20, 41, 146, 156, 19, 52, 9, 78, 235, 178, 217, 227, 207, 78, 72, 42, 149, 26, 236, 206, 69, 63, 85, 201, 164, 40, 79, 205, 149, 205, 244, 29, 211, 103, 9, 30, 1, 86, 130, 140, 191, 174 },
                            IsDeleted = false,
                            Name = "Practical Steel Shoes",
                            Price = 6.118691426291444m,
                            TypeId = 3
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 3, 2, 14, 22, 14, 405, DateTimeKind.Utc).AddTicks(7357),
                            Image = new byte[] { 200, 223, 203, 181, 122, 102, 61, 122, 60, 200, 166, 194, 163, 204, 249, 209, 207, 87, 97, 11, 214, 237, 224, 206, 161, 68, 206, 130, 149, 29, 202, 249, 209, 194, 137, 118, 105, 125, 184, 132, 41, 254, 205, 4, 7, 163, 3, 117, 191, 242, 254, 86, 98, 36, 104, 218, 254, 253, 20, 54, 152, 186, 229, 31, 254, 172, 240, 225, 67, 131, 103, 81, 159, 221, 226, 216, 31, 220, 198, 253, 65, 88, 194, 163, 30, 116, 151, 173, 89, 174, 119, 108, 105, 130, 235, 110, 25, 174, 5, 90 },
                            IsDeleted = false,
                            Name = "Handmade Soft Chicken",
                            Price = 14.696920481834994m,
                            TypeId = 5
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 10, 16, 10, 59, 58, 440, DateTimeKind.Utc).AddTicks(6928),
                            Image = new byte[] { 234, 222, 150, 156, 227, 0, 174, 238, 192, 96, 162, 55, 243, 168, 242, 173, 49, 31, 4, 142, 252, 46, 42, 90, 136, 160, 97, 212, 55, 181, 108, 151, 64, 228, 252, 207, 173, 221, 41, 116, 96, 103, 218, 63, 18, 205, 114, 122, 243, 25, 199, 81, 254, 180, 38, 187, 180, 60, 19, 67, 159, 217, 182, 10, 244, 11, 246, 15, 172, 34, 255, 84, 246, 144, 46, 149, 83, 235, 71, 187, 45, 230, 224, 29, 237, 27, 152, 140, 189, 64, 27, 113, 202, 230, 213, 135, 176, 207, 74, 6 },
                            IsDeleted = false,
                            Name = "Small Granite Salad",
                            Price = 4.275149537378525m,
                            TypeId = 3
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 5, 31, 8, 37, 42, 475, DateTimeKind.Utc).AddTicks(6495),
                            Image = new byte[] { 12, 222, 98, 131, 75, 154, 30, 97, 67, 248, 159, 172, 68, 133, 235, 137, 147, 232, 168, 17, 34, 111, 116, 230, 112, 251, 244, 39, 217, 77, 14, 52, 176, 6, 110, 41, 242, 60, 154, 101, 151, 207, 231, 122, 29, 247, 226, 127, 39, 64, 145, 76, 154, 68, 228, 156, 106, 123, 18, 80, 165, 247, 136, 245, 234, 106, 252, 62, 22, 194, 151, 86, 77, 66, 122, 82, 135, 249, 201, 120, 25, 117, 255, 152, 188, 193, 154, 108, 34, 209, 191, 118, 42, 74, 191, 159, 70, 241, 144, 179 },
                            IsDeleted = false,
                            Name = "Incredible Wooden Computer",
                            Price = 12.853378592922056m,
                            TypeId = 5
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 1, 14, 7, 15, 26, 510, DateTimeKind.Utc).AddTicks(6058),
                            Image = new byte[] { 45, 221, 45, 106, 180, 51, 143, 213, 199, 144, 156, 34, 149, 97, 229, 101, 246, 176, 75, 148, 71, 176, 189, 115, 88, 86, 135, 121, 123, 230, 176, 210, 32, 40, 225, 131, 54, 156, 11, 85, 206, 55, 244, 181, 40, 33, 81, 132, 92, 103, 90, 71, 55, 212, 162, 125, 31, 186, 18, 93, 171, 22, 90, 225, 223, 201, 2, 108, 127, 97, 47, 89, 164, 245, 198, 16, 187, 8, 74, 54, 5, 3, 29, 19, 139, 104, 155, 75, 134, 99, 99, 123, 138, 174, 169, 184, 221, 19, 213, 95 },
                            IsDeleted = false,
                            Name = "Generic Fresh Gloves",
                            Price = 2.4316076484656003m,
                            TypeId = 3
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 8, 29, 3, 53, 10, 545, DateTimeKind.Utc).AddTicks(5621),
                            Image = new byte[] { 79, 221, 249, 81, 28, 205, 0, 73, 74, 39, 152, 151, 229, 61, 222, 65, 88, 120, 238, 24, 109, 240, 7, 255, 64, 178, 27, 203, 29, 126, 82, 112, 143, 74, 83, 221, 122, 252, 124, 70, 5, 160, 1, 240, 52, 76, 193, 136, 144, 142, 35, 66, 211, 100, 95, 94, 213, 250, 17, 106, 178, 52, 43, 204, 213, 40, 7, 154, 233, 1, 199, 92, 251, 168, 18, 205, 239, 22, 203, 244, 241, 146, 59, 142, 90, 15, 156, 43, 234, 245, 7, 128, 234, 18, 147, 208, 116, 53, 27, 11 },
                            IsDeleted = false,
                            Name = "Unbranded Rubber Towels",
                            Price = 11.009836704009137m,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 4, 13, 1, 30, 54, 580, DateTimeKind.Utc).AddTicks(5181),
                            Image = new byte[] { 113, 220, 196, 56, 132, 103, 113, 188, 206, 191, 149, 13, 54, 25, 216, 29, 186, 64, 146, 155, 147, 49, 80, 139, 40, 13, 174, 30, 191, 22, 244, 14, 255, 108, 198, 55, 190, 91, 237, 54, 60, 8, 14, 43, 63, 118, 48, 141, 196, 182, 237, 61, 111, 244, 29, 63, 139, 57, 16, 119, 184, 82, 253, 183, 203, 134, 13, 201, 82, 161, 94, 94, 82, 91, 95, 138, 35, 37, 76, 178, 221, 32, 89, 9, 41, 182, 158, 11, 79, 134, 171, 133, 75, 118, 125, 233, 10, 87, 96, 184 },
                            IsDeleted = false,
                            Name = "Intelligent Concrete Cheese",
                            Price = 19.588065759552668m,
                            TypeId = 3
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2023, 11, 27, 0, 8, 38, 615, DateTimeKind.Utc).AddTicks(4743),
                            Image = new byte[] { 147, 220, 144, 31, 237, 1, 225, 48, 81, 87, 146, 130, 134, 245, 209, 249, 28, 8, 53, 30, 184, 114, 154, 23, 15, 105, 65, 112, 97, 175, 150, 172, 111, 143, 57, 144, 3, 187, 95, 39, 114, 112, 27, 102, 74, 160, 159, 146, 248, 221, 182, 56, 12, 132, 219, 32, 65, 120, 15, 132, 191, 113, 207, 162, 192, 229, 19, 247, 188, 64, 246, 97, 169, 14, 171, 72, 86, 51, 205, 111, 201, 175, 119, 131, 248, 93, 159, 234, 179, 24, 79, 138, 171, 219, 103, 1, 161, 121, 165, 100 },
                            IsDeleted = false,
                            Name = "Sleek Frozen Chips",
                            Price = 9.166294815096218m,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 7, 11, 20, 46, 22, 650, DateTimeKind.Utc).AddTicks(4312),
                            Image = new byte[] { 181, 219, 91, 7, 85, 154, 82, 164, 213, 238, 142, 248, 215, 209, 202, 214, 127, 208, 216, 161, 222, 179, 228, 164, 247, 196, 212, 195, 3, 71, 56, 74, 222, 177, 171, 234, 71, 26, 208, 23, 169, 217, 40, 161, 85, 202, 15, 150, 44, 4, 127, 51, 168, 20, 153, 1, 247, 183, 15, 145, 197, 143, 160, 141, 182, 68, 25, 38, 37, 224, 142, 100, 0, 193, 247, 5, 138, 66, 78, 45, 181, 61, 150, 254, 199, 4, 161, 202, 23, 169, 243, 143, 11, 63, 81, 26, 56, 154, 235, 16 },
                            IsDeleted = false,
                            Name = "Licensed Metal Mouse",
                            Price = 17.744523870639749m,
                            TypeId = 4
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 2, 24, 19, 24, 6, 685, DateTimeKind.Utc).AddTicks(3875),
                            Image = new byte[] { 215, 218, 39, 238, 189, 52, 195, 24, 88, 134, 139, 109, 40, 173, 196, 178, 225, 153, 124, 36, 4, 244, 45, 48, 223, 31, 104, 21, 165, 223, 218, 231, 78, 211, 30, 68, 139, 122, 65, 8, 224, 65, 53, 220, 96, 244, 126, 155, 97, 43, 72, 47, 69, 164, 87, 226, 173, 246, 14, 158, 204, 173, 114, 120, 172, 163, 30, 84, 142, 127, 38, 102, 87, 115, 67, 194, 190, 80, 207, 235, 161, 204, 180, 121, 151, 171, 162, 169, 124, 59, 151, 148, 107, 163, 60, 50, 206, 188, 48, 189 },
                            IsDeleted = false,
                            Name = "Ergonomic Plastic Shirt",
                            Price = 7.32275292618328m,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 10, 9, 16, 1, 50, 720, DateTimeKind.Utc).AddTicks(3438),
                            Image = new byte[] { 249, 218, 242, 213, 38, 206, 52, 139, 220, 30, 135, 226, 120, 137, 189, 142, 67, 97, 31, 167, 41, 53, 119, 188, 199, 123, 251, 103, 71, 120, 124, 133, 190, 245, 144, 158, 207, 217, 178, 248, 23, 169, 66, 24, 107, 30, 238, 160, 149, 82, 18, 42, 225, 53, 21, 195, 98, 54, 13, 171, 210, 204, 68, 100, 161, 2, 36, 131, 248, 31, 190, 105, 174, 38, 144, 127, 242, 95, 81, 168, 140, 91, 210, 244, 102, 82, 164, 137, 224, 204, 59, 153, 204, 7, 38, 75, 101, 222, 118, 105 },
                            IsDeleted = false,
                            Name = "Fantastic Steel Soap",
                            Price = 15.90098198172683m,
                            TypeId = 4
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 5, 24, 13, 39, 34, 755, DateTimeKind.Utc).AddTicks(3000),
                            Image = new byte[] { 27, 217, 190, 188, 142, 104, 165, 255, 95, 181, 132, 88, 201, 101, 183, 106, 165, 41, 195, 42, 79, 118, 193, 73, 175, 214, 142, 186, 233, 16, 30, 35, 46, 23, 3, 247, 20, 57, 35, 233, 78, 18, 79, 83, 118, 72, 93, 165, 201, 122, 219, 37, 125, 197, 210, 164, 24, 117, 13, 184, 217, 234, 21, 79, 151, 96, 42, 177, 97, 191, 86, 108, 5, 217, 220, 61, 38, 109, 210, 102, 120, 233, 240, 111, 53, 249, 165, 104, 68, 94, 223, 158, 44, 107, 16, 99, 252, 0, 187, 21 },
                            IsDeleted = false,
                            Name = "Handcrafted Soft Bacon",
                            Price = 5.479211037270361m,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 1, 7, 12, 17, 18, 790, DateTimeKind.Utc).AddTicks(2560),
                            Image = new byte[] { 60, 217, 137, 163, 247, 1, 21, 115, 227, 77, 129, 205, 26, 65, 176, 70, 8, 241, 102, 173, 117, 182, 10, 213, 150, 49, 33, 12, 139, 168, 192, 193, 157, 57, 117, 81, 88, 153, 148, 217, 133, 122, 92, 142, 129, 114, 205, 169, 253, 161, 164, 32, 26, 85, 144, 133, 206, 180, 12, 197, 223, 9, 231, 58, 141, 191, 47, 224, 203, 94, 238, 110, 92, 140, 40, 250, 90, 124, 83, 36, 100, 120, 14, 234, 4, 160, 167, 72, 169, 239, 131, 163, 140, 207, 250, 124, 146, 34, 1, 194 },
                            IsDeleted = false,
                            Name = "Tasty Cotton Chair",
                            Price = 14.057440092813892m,
                            TypeId = 4
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 8, 22, 8, 55, 2, 825, DateTimeKind.Utc).AddTicks(2123),
                            Image = new byte[] { 94, 216, 85, 138, 95, 155, 134, 230, 102, 229, 125, 67, 106, 29, 169, 34, 106, 185, 9, 48, 154, 247, 84, 97, 126, 141, 181, 95, 45, 65, 98, 95, 13, 92, 232, 171, 156, 248, 5, 202, 188, 226, 105, 201, 141, 156, 60, 174, 49, 200, 109, 27, 182, 229, 78, 102, 132, 243, 11, 210, 230, 39, 185, 37, 130, 30, 53, 14, 52, 254, 133, 113, 179, 63, 116, 183, 142, 139, 212, 225, 80, 6, 45, 100, 211, 71, 168, 39, 13, 129, 38, 168, 236, 51, 228, 148, 41, 68, 70, 110 },
                            IsDeleted = false,
                            Name = "Gorgeous Wooden Ball",
                            Price = 3.635669148357423m,
                            TypeId = 2
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 4, 6, 6, 32, 46, 860, DateTimeKind.Utc).AddTicks(1683),
                            Image = new byte[] { 128, 216, 32, 113, 199, 53, 247, 90, 234, 125, 122, 184, 187, 249, 163, 254, 204, 129, 173, 179, 192, 56, 157, 237, 102, 232, 72, 177, 207, 217, 4, 253, 125, 126, 91, 5, 225, 88, 118, 187, 243, 75, 118, 4, 152, 199, 172, 179, 102, 239, 55, 22, 82, 117, 12, 71, 58, 51, 11, 223, 236, 69, 138, 16, 120, 125, 59, 60, 158, 158, 29, 116, 11, 242, 192, 117, 193, 153, 85, 159, 60, 149, 75, 223, 162, 238, 170, 7, 114, 19, 202, 174, 77, 151, 206, 173, 192, 102, 140, 26 },
                            IsDeleted = false,
                            Name = "Awesome Fresh Shoes",
                            Price = 12.213898203900973m,
                            TypeId = 4
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2023, 11, 20, 5, 10, 30, 895, DateTimeKind.Utc).AddTicks(1252),
                            Image = new byte[] { 162, 215, 236, 88, 48, 206, 104, 206, 109, 20, 119, 45, 11, 213, 156, 219, 46, 74, 80, 55, 229, 121, 231, 122, 78, 68, 219, 3, 113, 114, 166, 154, 236, 160, 205, 94, 37, 183, 231, 171, 41, 179, 131, 63, 163, 241, 27, 184, 154, 23, 0, 17, 239, 5, 202, 40, 240, 114, 10, 236, 243, 100, 92, 251, 109, 220, 65, 107, 7, 61, 181, 118, 98, 164, 13, 50, 245, 168, 214, 93, 40, 35, 105, 90, 113, 148, 171, 231, 214, 164, 110, 179, 173, 251, 184, 197, 86, 135, 209, 199 },
                            IsDeleted = false,
                            Name = "Refined Granite Chicken",
                            Price = 1.792127259444504m,
                            TypeId = 2
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2024, 7, 5, 1, 48, 14, 930, DateTimeKind.Utc).AddTicks(814),
                            Image = new byte[] { 196, 215, 183, 64, 152, 104, 216, 65, 241, 172, 115, 163, 92, 177, 149, 183, 144, 18, 243, 186, 11, 186, 49, 6, 54, 159, 111, 86, 19, 10, 72, 56, 92, 194, 64, 184, 105, 23, 89, 156, 96, 27, 144, 122, 174, 27, 138, 188, 206, 62, 201, 12, 139, 149, 135, 9, 165, 177, 9, 249, 249, 130, 46, 231, 99, 58, 70, 153, 113, 221, 77, 121, 185, 87, 89, 239, 41, 182, 87, 26, 20, 178, 135, 213, 64, 59, 173, 198, 58, 54, 18, 184, 13, 96, 162, 222, 237, 169, 22, 115 },
                            IsDeleted = false,
                            Name = "Rustic Concrete Salad",
                            Price = 10.370356314988035m,
                            TypeId = 4
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2024, 2, 18, 0, 25, 58, 965, DateTimeKind.Utc).AddTicks(376),
                            Image = new byte[] { 230, 214, 131, 39, 0, 2, 73, 181, 116, 68, 112, 24, 173, 141, 143, 147, 243, 218, 151, 61, 49, 251, 122, 146, 30, 250, 2, 168, 181, 162, 234, 214, 204, 228, 178, 18, 173, 118, 202, 140, 151, 132, 157, 181, 185, 69, 250, 193, 2, 101, 147, 8, 39, 37, 69, 234, 91, 240, 9, 6, 0, 161, 255, 210, 89, 153, 76, 200, 218, 124, 229, 124, 16, 10, 165, 173, 93, 197, 217, 216, 0, 64, 165, 80, 15, 226, 174, 166, 159, 199, 182, 189, 109, 196, 140, 246, 132, 203, 92, 31 },
                            IsDeleted = false,
                            Name = "Practical Frozen Computer",
                            Price = 18.948585370531585m,
                            TypeId = 2
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2024, 10, 2, 21, 3, 42, 999, DateTimeKind.Utc).AddTicks(9937),
                            Image = new byte[] { 8, 214, 78, 14, 105, 156, 186, 41, 248, 219, 108, 142, 253, 105, 136, 111, 85, 162, 58, 192, 86, 60, 196, 31, 5, 86, 149, 251, 87, 59, 140, 116, 59, 6, 37, 108, 242, 214, 59, 125, 206, 236, 170, 240, 196, 111, 105, 198, 54, 140, 92, 3, 196, 181, 3, 204, 17, 47, 8, 19, 6, 191, 209, 189, 78, 248, 82, 246, 68, 28, 125, 126, 103, 189, 241, 106, 145, 211, 90, 150, 236, 207, 196, 203, 222, 137, 176, 133, 3, 89, 90, 194, 206, 40, 118, 15, 26, 237, 161, 204 },
                            IsDeleted = false,
                            Name = "Handmade Metal Gloves",
                            Price = 8.526814426075116m,
                            TypeId = 5
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2024, 5, 17, 18, 41, 27, 34, DateTimeKind.Utc).AddTicks(9501),
                            Image = new byte[] { 42, 213, 26, 245, 209, 53, 43, 156, 124, 115, 105, 3, 78, 69, 130, 75, 183, 106, 221, 67, 124, 125, 14, 171, 237, 177, 40, 77, 249, 211, 46, 18, 171, 41, 151, 198, 54, 54, 172, 109, 5, 84, 183, 43, 207, 153, 217, 202, 107, 179, 37, 254, 96, 70, 193, 173, 199, 111, 7, 32, 13, 221, 163, 168, 68, 87, 88, 37, 173, 188, 21, 129, 190, 112, 61, 39, 197, 226, 219, 83, 216, 93, 226, 69, 173, 48, 177, 101, 103, 234, 254, 199, 46, 140, 96, 39, 177, 15, 231, 120 },
                            IsDeleted = false,
                            Name = "Small Plastic Hat",
                            Price = 17.105043481618647m,
                            TypeId = 2
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2023, 12, 31, 17, 19, 11, 69, DateTimeKind.Utc).AddTicks(9061),
                            Image = new byte[] { 75, 212, 229, 220, 57, 207, 156, 16, 255, 11, 102, 121, 158, 33, 123, 39, 25, 50, 129, 198, 162, 189, 87, 55, 213, 12, 188, 159, 155, 107, 209, 176, 27, 75, 10, 31, 122, 149, 29, 94, 60, 189, 196, 102, 219, 195, 72, 207, 159, 219, 238, 249, 252, 214, 127, 142, 125, 174, 7, 45, 19, 252, 116, 147, 58, 182, 93, 83, 23, 91, 172, 132, 21, 34, 138, 228, 248, 240, 92, 17, 196, 236, 0, 192, 124, 215, 179, 68, 204, 124, 162, 204, 142, 240, 74, 64, 72, 49, 44, 36 },
                            IsDeleted = false,
                            Name = "Incredible Steel Fish",
                            Price = 6.683272537162197m,
                            TypeId = 5
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2024, 8, 15, 13, 56, 55, 104, DateTimeKind.Utc).AddTicks(8630),
                            Image = new byte[] { 109, 212, 177, 195, 162, 105, 12, 132, 131, 162, 98, 238, 239, 253, 116, 3, 124, 251, 36, 73, 199, 254, 161, 195, 189, 104, 79, 242, 61, 4, 115, 77, 138, 109, 124, 121, 191, 245, 142, 78, 115, 37, 209, 162, 230, 237, 184, 212, 211, 2, 184, 244, 153, 102, 60, 111, 51, 237, 6, 58, 26, 26, 70, 126, 47, 20, 99, 130, 128, 251, 68, 134, 108, 213, 214, 162, 44, 255, 221, 207, 176, 122, 30, 59, 75, 126, 180, 36, 48, 13, 70, 209, 238, 84, 52, 88, 223, 82, 114, 209 },
                            IsDeleted = false,
                            Name = "Generic Soft Chips",
                            Price = 15.261501592705728m,
                            TypeId = 2
                        });
                });

            modelBuilder.Entity("DAL.Entities.AddOnType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_add_on_types");

                    b.ToTable("add_on_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Balloon"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PostCard"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sweets"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Wrapping"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ribbon"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Bouquet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("description");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("BYTEA")
                        .HasColumnName("image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("MainColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("main_color");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<int>("PopularityScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("popularity_score");

                    b.Property<decimal>("Price")
                        .HasColumnType("NUMERIC(10, 2)")
                        .HasColumnName("price");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("size");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_bouquets");

                    b.HasIndex("MainColor")
                        .HasDatabaseName("ix_bouquets_main_color");

                    b.HasIndex("Size")
                        .HasDatabaseName("ix_bouquets_size");

                    b.ToTable("bouquets", null, t =>
                        {
                            t.HasCheckConstraint("CK_Bouquet_Size", "size IN ('Small', 'Medium', 'Large')");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 6, 6, 17, 15, 33, 404, DateTimeKind.Utc).AddTicks(9515),
                            Description = "Nemo quasi dolorem.",
                            Image = new byte[] { 151, 228, 163, 149, 207, 255, 70, 105, 156, 115, 196, 161, 205, 16, 52, 19, 91, 78, 163, 111, 132, 165, 74, 223, 122, 14, 160, 156, 227, 193, 23, 108, 228, 142, 130, 78, 2, 33, 190, 15, 59, 83, 88, 240, 163, 40, 24, 75, 233, 145, 235, 129, 227, 18, 188, 241, 154, 196, 26, 193, 94, 169, 134, 218, 91, 87, 189, 63, 142, 230, 16, 57, 143, 147, 52, 48, 77, 90, 60, 82, 246, 85, 179, 81, 214, 149, 137, 209, 210, 144, 180, 62, 7, 253, 177, 146, 205, 125, 148, 75 },
                            IsDeleted = false,
                            MainColor = "ivory",
                            Name = "Gorgeous Wooden Shoes",
                            PopularityScore = 26,
                            Price = 12.825448612135575m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2024, 11, 3, 22, 50, 34, 278, DateTimeKind.Utc).AddTicks(3306)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 1, 10, 10, 19, 694, DateTimeKind.Utc).AddTicks(4412),
                            Description = "Nobis quasi iusto.",
                            Image = new byte[] { 185, 227, 111, 124, 56, 152, 183, 221, 32, 11, 193, 22, 30, 236, 46, 240, 189, 22, 70, 242, 169, 230, 147, 108, 98, 105, 51, 239, 133, 90, 185, 10, 83, 176, 245, 168, 71, 129, 47, 255, 114, 188, 101, 43, 174, 82, 135, 80, 29, 184, 180, 125, 127, 163, 122, 210, 79, 3, 25, 206, 100, 199, 87, 198, 81, 182, 194, 109, 247, 134, 168, 60, 230, 70, 128, 237, 129, 104, 189, 16, 226, 227, 209, 204, 165, 60, 139, 176, 54, 34, 88, 67, 103, 97, 155, 170, 100, 159, 217, 247 },
                            IsDeleted = false,
                            MainColor = "silver",
                            Name = "Licensed Cotton Keyboard",
                            PopularityScore = 85,
                            Price = 160.916991813535453m,
                            Size = "Small",
                            UpdatedAt = new DateTime(2024, 11, 9, 11, 55, 58, 510, DateTimeKind.Utc).AddTicks(3548)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 9, 28, 1, 5, 5, 983, DateTimeKind.Utc).AddTicks(9159),
                            Description = "Veritatis architecto cumque.",
                            Image = new byte[] { 219, 227, 58, 99, 160, 50, 39, 80, 164, 163, 189, 140, 110, 200, 39, 204, 31, 222, 234, 117, 207, 39, 221, 248, 74, 197, 199, 65, 39, 242, 91, 168, 195, 210, 103, 1, 139, 224, 160, 240, 169, 36, 114, 102, 185, 124, 247, 84, 82, 223, 125, 120, 27, 51, 56, 179, 5, 66, 24, 219, 107, 230, 41, 177, 71, 21, 200, 155, 97, 37, 64, 62, 61, 249, 204, 171, 181, 119, 62, 205, 206, 114, 239, 71, 116, 227, 140, 144, 154, 179, 252, 72, 199, 197, 133, 195, 250, 193, 31, 164 },
                            IsDeleted = false,
                            MainColor = "teal",
                            Name = "Gorgeous Metal Pizza",
                            PopularityScore = 43,
                            Price = 489.222411759766755m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2024, 11, 1, 1, 1, 22, 742, DateTimeKind.Utc).AddTicks(3714)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 5, 24, 16, 59, 52, 273, DateTimeKind.Utc).AddTicks(3897),
                            Description = "Odio architecto ut.",
                            Image = new byte[] { 253, 226, 6, 74, 8, 204, 152, 196, 39, 58, 186, 1, 191, 164, 32, 168, 129, 166, 141, 249, 245, 104, 39, 132, 50, 32, 90, 147, 201, 139, 253, 70, 51, 245, 218, 91, 207, 64, 17, 225, 224, 140, 127, 161, 196, 166, 102, 89, 134, 6, 70, 115, 184, 195, 245, 148, 187, 129, 24, 232, 113, 4, 251, 156, 60, 116, 206, 202, 202, 197, 216, 65, 148, 172, 24, 104, 232, 133, 191, 139, 186, 0, 13, 194, 68, 138, 142, 111, 255, 69, 160, 78, 40, 41, 111, 219, 145, 227, 100, 80 },
                            IsDeleted = false,
                            MainColor = "maroon",
                            Name = "Licensed Frozen Towels",
                            PopularityScore = 1,
                            Price = 251.889648560383228m,
                            Size = "Small",
                            UpdatedAt = new DateTime(2024, 11, 6, 14, 6, 46, 974, DateTimeKind.Utc).AddTicks(3869)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 19, 9, 54, 38, 562, DateTimeKind.Utc).AddTicks(8642),
                            Description = "Illum architecto labore.",
                            Image = new byte[] { 30, 226, 209, 49, 113, 101, 9, 56, 171, 210, 183, 118, 16, 128, 26, 132, 228, 110, 48, 124, 26, 169, 112, 16, 26, 124, 237, 230, 107, 35, 159, 228, 162, 23, 76, 181, 20, 159, 130, 209, 23, 245, 140, 220, 207, 208, 213, 94, 186, 46, 16, 110, 84, 83, 179, 117, 113, 193, 23, 245, 120, 35, 204, 135, 50, 210, 212, 248, 52, 100, 112, 68, 235, 95, 100, 37, 28, 148, 65, 73, 166, 143, 43, 60, 19, 49, 143, 79, 99, 215, 67, 83, 136, 141, 89, 244, 40, 4, 170, 252 },
                            IsDeleted = false,
                            MainColor = "orchid",
                            Name = "Incredible Plastic Ball",
                            PopularityScore = 60,
                            Price = 0m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 12, 11, 206, DateTimeKind.Utc).AddTicks(4031)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 9, 15, 0, 49, 24, 852, DateTimeKind.Utc).AddTicks(3379),
                            Description = "Consectetur beatae quas.",
                            Image = new byte[] { 64, 225, 157, 24, 217, 255, 122, 171, 46, 106, 179, 236, 96, 92, 19, 96, 70, 55, 212, 255, 64, 234, 186, 157, 1, 215, 129, 56, 13, 187, 66, 130, 18, 57, 191, 15, 88, 255, 243, 194, 78, 93, 153, 23, 219, 251, 69, 98, 238, 85, 217, 105, 240, 227, 113, 86, 39, 0, 22, 2, 126, 65, 158, 114, 40, 49, 217, 39, 157, 4, 8, 70, 67, 18, 177, 227, 80, 162, 194, 6, 145, 30, 73, 183, 226, 216, 145, 46, 199, 104, 231, 88, 232, 241, 67, 12, 190, 38, 239, 169 },
                            IsDeleted = false,
                            MainColor = "fuchsia",
                            Name = "Refined Rubber Chips",
                            PopularityScore = 18,
                            Price = 183.134031854166448m,
                            Size = "Large",
                            UpdatedAt = new DateTime(2024, 11, 3, 16, 17, 35, 438, DateTimeKind.Utc).AddTicks(4188)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 5, 11, 16, 44, 11, 141, DateTimeKind.Utc).AddTicks(8106),
                            Description = "Similique beatae est.",
                            Image = new byte[] { 98, 225, 104, 255, 65, 153, 234, 31, 178, 1, 176, 97, 177, 56, 13, 60, 168, 255, 119, 130, 102, 42, 4, 41, 233, 50, 20, 139, 175, 84, 228, 31, 130, 91, 49, 104, 156, 95, 101, 178, 132, 197, 166, 82, 230, 37, 180, 103, 34, 124, 162, 100, 141, 115, 47, 55, 221, 63, 22, 15, 133, 95, 112, 94, 29, 144, 223, 85, 6, 164, 160, 73, 154, 196, 253, 160, 132, 177, 67, 196, 125, 172, 104, 50, 177, 127, 146, 14, 44, 250, 139, 93, 72, 85, 45, 37, 85, 72, 53, 85 },
                            IsDeleted = false,
                            MainColor = "green",
                            Name = "Fantastic Fresh Tuna",
                            PopularityScore = 77,
                            Price = 7.7736311619047194m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2024, 11, 9, 5, 22, 59, 670, DateTimeKind.Utc).AddTicks(4334)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 1, 6, 9, 38, 57, 431, DateTimeKind.Utc).AddTicks(2835),
                            Description = "Rerum vitae eaque.",
                            Image = new byte[] { 132, 224, 52, 230, 170, 51, 91, 147, 53, 153, 173, 215, 1, 20, 6, 24, 10, 199, 26, 5, 139, 107, 77, 181, 209, 142, 167, 221, 81, 236, 134, 189, 241, 125, 164, 194, 224, 190, 214, 163, 187, 46, 179, 141, 241, 79, 36, 108, 87, 163, 108, 95, 41, 3, 237, 24, 146, 126, 21, 28, 139, 126, 65, 73, 19, 239, 229, 132, 112, 67, 55, 76, 241, 119, 73, 93, 184, 191, 196, 130, 105, 59, 134, 173, 128, 38, 148, 238, 144, 139, 47, 98, 169, 186, 23, 61, 236, 106, 122, 1 },
                            IsDeleted = false,
                            MainColor = "black",
                            Name = "Unbranded Wooden Pants",
                            PopularityScore = 35,
                            Price = 426.036659462394543m,
                            Size = "Large",
                            UpdatedAt = new DateTime(2024, 10, 31, 18, 28, 23, 902, DateTimeKind.Utc).AddTicks(4480)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 9, 2, 0, 33, 43, 720, DateTimeKind.Utc).AddTicks(7569),
                            Description = "Quia vitae nemo.",
                            Image = new byte[] { 166, 223, 255, 206, 18, 204, 204, 6, 185, 49, 169, 76, 82, 240, 255, 245, 109, 143, 190, 136, 177, 172, 151, 66, 185, 233, 58, 47, 243, 132, 40, 91, 97, 159, 23, 28, 37, 30, 71, 147, 242, 150, 192, 201, 252, 121, 147, 113, 139, 202, 53, 90, 197, 147, 170, 249, 72, 189, 20, 41, 146, 156, 19, 52, 9, 78, 235, 178, 217, 227, 207, 78, 72, 42, 149, 26, 236, 206, 69, 63, 85, 201, 164, 40, 79, 205, 149, 205, 244, 29, 211, 103, 9, 30, 1, 86, 130, 140, 191, 174 },
                            IsDeleted = false,
                            MainColor = "turquoise",
                            Name = "Practical Granite Car",
                            PopularityScore = 94,
                            Price = 291.799185727163508m,
                            Size = "Small",
                            UpdatedAt = new DateTime(2024, 11, 6, 7, 33, 48, 134, DateTimeKind.Utc).AddTicks(4635)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 4, 28, 16, 28, 30, 10, DateTimeKind.Utc).AddTicks(2298),
                            Description = "Cumque dicta in.",
                            Image = new byte[] { 200, 223, 203, 181, 122, 102, 61, 122, 60, 200, 166, 194, 163, 204, 249, 209, 207, 87, 97, 11, 214, 237, 224, 206, 161, 68, 206, 130, 149, 29, 202, 249, 209, 194, 137, 118, 105, 125, 184, 132, 41, 254, 205, 4, 7, 163, 3, 117, 191, 242, 254, 86, 98, 36, 104, 218, 254, 253, 20, 54, 152, 186, 229, 31, 254, 172, 240, 225, 67, 131, 103, 81, 159, 221, 226, 216, 31, 220, 198, 253, 65, 88, 194, 163, 30, 116, 151, 173, 89, 174, 119, 108, 105, 130, 235, 110, 25, 174, 5, 90 },
                            IsDeleted = false,
                            MainColor = "magenta",
                            Name = "Tasty Soft Cheese",
                            PopularityScore = 52,
                            Price = 281.388732479600820m,
                            Size = "Large",
                            UpdatedAt = new DateTime(2024, 11, 11, 20, 39, 12, 366, DateTimeKind.Utc).AddTicks(4781)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2023, 12, 24, 9, 23, 16, 299, DateTimeKind.Utc).AddTicks(7025),
                            Description = "Beatae dicta voluptas.",
                            Image = new byte[] { 234, 222, 150, 156, 227, 0, 174, 238, 192, 96, 162, 55, 243, 168, 242, 173, 49, 31, 4, 142, 252, 46, 42, 90, 136, 160, 97, 212, 55, 181, 108, 151, 64, 228, 252, 207, 173, 221, 41, 116, 96, 103, 218, 63, 18, 205, 114, 122, 243, 25, 199, 81, 254, 180, 38, 187, 180, 60, 19, 67, 159, 217, 182, 10, 244, 11, 246, 15, 172, 34, 255, 84, 246, 144, 46, 149, 83, 235, 71, 187, 45, 230, 224, 29, 237, 27, 152, 140, 189, 64, 27, 113, 202, 230, 213, 135, 176, 207, 74, 6 },
                            IsDeleted = false,
                            MainColor = "azure",
                            Name = "Sleek Steel Table",
                            PopularityScore = 10,
                            Price = 107.1945399978172951m,
                            Size = "Small",
                            UpdatedAt = new DateTime(2024, 11, 3, 9, 44, 36, 598, DateTimeKind.Utc).AddTicks(4926)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 8, 20, 0, 18, 2, 589, DateTimeKind.Utc).AddTicks(1753),
                            Description = "Blanditiis sunt aut.",
                            Image = new byte[] { 12, 222, 98, 131, 75, 154, 30, 97, 67, 248, 159, 172, 68, 133, 235, 137, 147, 232, 168, 17, 34, 111, 116, 230, 112, 251, 244, 39, 217, 77, 14, 52, 176, 6, 110, 41, 242, 60, 154, 101, 151, 207, 231, 122, 29, 247, 226, 127, 39, 64, 145, 76, 154, 68, 228, 156, 106, 123, 18, 80, 165, 247, 136, 245, 234, 106, 252, 62, 22, 194, 151, 86, 77, 66, 122, 82, 135, 249, 201, 120, 25, 117, 255, 152, 188, 193, 154, 108, 34, 209, 191, 118, 42, 74, 191, 159, 70, 241, 144, 179 },
                            IsDeleted = false,
                            MainColor = "yellow",
                            Name = "Tasty Plastic Keyboard",
                            PopularityScore = 69,
                            Price = 253.8870095950024694m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2024, 11, 8, 22, 50, 0, 830, DateTimeKind.Utc).AddTicks(5074)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 4, 15, 16, 12, 48, 878, DateTimeKind.Utc).AddTicks(6479),
                            Description = "Fugiat sunt autem.",
                            Image = new byte[] { 45, 221, 45, 106, 180, 51, 143, 213, 199, 144, 156, 34, 149, 97, 229, 101, 246, 176, 75, 148, 71, 176, 189, 115, 88, 86, 135, 121, 123, 230, 176, 210, 32, 40, 225, 131, 54, 156, 11, 85, 206, 55, 244, 181, 40, 33, 81, 132, 92, 103, 90, 71, 55, 212, 162, 125, 31, 186, 18, 93, 171, 22, 90, 225, 223, 201, 2, 108, 127, 97, 47, 89, 164, 245, 198, 16, 187, 8, 74, 54, 5, 3, 29, 19, 139, 104, 155, 75, 134, 99, 99, 123, 138, 174, 169, 184, 221, 19, 213, 95 },
                            IsDeleted = false,
                            MainColor = "pink",
                            Name = "Sleek Rubber Pizza",
                            PopularityScore = 27,
                            Price = 28.138873247960082m,
                            Size = "Small",
                            UpdatedAt = new DateTime(2024, 10, 31, 11, 55, 25, 62, DateTimeKind.Utc).AddTicks(5217)
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2023, 12, 11, 9, 7, 35, 168, DateTimeKind.Utc).AddTicks(1215),
                            Description = "Non explicabo facilis.",
                            Image = new byte[] { 79, 221, 249, 81, 28, 205, 0, 73, 74, 39, 152, 151, 229, 61, 222, 65, 88, 120, 238, 24, 109, 240, 7, 255, 64, 178, 27, 203, 29, 126, 82, 112, 143, 74, 83, 221, 122, 252, 124, 70, 5, 160, 1, 240, 52, 76, 193, 136, 144, 142, 35, 66, 211, 100, 95, 94, 213, 250, 17, 106, 178, 52, 43, 204, 213, 40, 7, 154, 233, 1, 199, 92, 251, 168, 18, 205, 239, 22, 203, 244, 241, 146, 59, 142, 90, 15, 156, 43, 234, 245, 7, 128, 234, 18, 147, 208, 116, 53, 27, 11 },
                            IsDeleted = false,
                            MainColor = "sky blue",
                            Name = "Small Frozen Towels",
                            PopularityScore = 86,
                            Price = 15.896536649622264m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2024, 11, 6, 1, 0, 49, 294, DateTimeKind.Utc).AddTicks(5373)
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 8, 7, 0, 2, 21, 457, DateTimeKind.Utc).AddTicks(5943),
                            Description = "Officia explicabo repudiandae.",
                            Image = new byte[] { 113, 220, 196, 56, 132, 103, 113, 188, 206, 191, 149, 13, 54, 25, 216, 29, 186, 64, 146, 155, 147, 49, 80, 139, 40, 13, 174, 30, 191, 22, 244, 14, 255, 108, 198, 55, 190, 91, 237, 54, 60, 8, 14, 43, 63, 118, 48, 141, 196, 182, 237, 61, 111, 244, 29, 63, 139, 57, 16, 119, 184, 82, 253, 183, 203, 134, 13, 201, 82, 161, 94, 94, 82, 91, 95, 138, 35, 37, 76, 178, 221, 32, 89, 9, 41, 182, 158, 11, 79, 134, 171, 133, 75, 118, 125, 233, 10, 87, 96, 184 },
                            IsDeleted = false,
                            MainColor = "ivory",
                            Name = "Awesome Concrete Ball",
                            PopularityScore = 44,
                            Price = 45.669674235707860m,
                            Size = "Large",
                            UpdatedAt = new DateTime(2024, 11, 11, 14, 6, 13, 526, DateTimeKind.Utc).AddTicks(5521)
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 4, 2, 15, 57, 7, 747, DateTimeKind.Utc).AddTicks(670),
                            Description = "Delectus aspernatur dolor.",
                            Image = new byte[] { 147, 220, 144, 31, 237, 1, 225, 48, 81, 87, 146, 130, 134, 245, 209, 249, 28, 8, 53, 30, 184, 114, 154, 23, 15, 105, 65, 112, 97, 175, 150, 172, 111, 143, 57, 144, 3, 187, 95, 39, 114, 112, 27, 102, 74, 160, 159, 146, 248, 221, 182, 56, 12, 132, 219, 32, 65, 120, 15, 132, 191, 113, 207, 162, 192, 229, 19, 247, 188, 64, 246, 97, 169, 14, 171, 72, 86, 51, 205, 111, 201, 175, 119, 131, 248, 93, 159, 234, 179, 24, 79, 138, 171, 219, 103, 1, 161, 121, 165, 100 },
                            IsDeleted = false,
                            MainColor = "silver",
                            Name = "Ergonomic Granite Sausages",
                            PopularityScore = 2,
                            Price = 63.9347409205207827m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2024, 11, 3, 3, 11, 37, 758, DateTimeKind.Utc).AddTicks(5665)
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2023, 11, 28, 8, 51, 54, 36, DateTimeKind.Utc).AddTicks(5395),
                            Description = "Nisi aspernatur ducimus.",
                            Image = new byte[] { 181, 219, 91, 7, 85, 154, 82, 164, 213, 238, 142, 248, 215, 209, 202, 214, 127, 208, 216, 161, 222, 179, 228, 164, 247, 196, 212, 195, 3, 71, 56, 74, 222, 177, 171, 234, 71, 26, 208, 23, 169, 217, 40, 161, 85, 202, 15, 150, 44, 4, 127, 51, 168, 20, 153, 1, 247, 183, 15, 145, 197, 143, 160, 141, 182, 68, 25, 38, 37, 224, 142, 100, 0, 193, 247, 5, 138, 66, 78, 45, 181, 61, 150, 254, 199, 4, 161, 202, 23, 169, 243, 143, 11, 63, 81, 26, 56, 154, 235, 16 },
                            IsDeleted = false,
                            MainColor = "mint green",
                            Name = "Generic Soft Tuna",
                            PopularityScore = 61,
                            Price = 100.15797754244778m,
                            Size = "Large",
                            UpdatedAt = new DateTime(2024, 11, 8, 16, 17, 1, 990, DateTimeKind.Utc).AddTicks(5809)
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 7, 24, 23, 46, 40, 326, DateTimeKind.Utc).AddTicks(131),
                            Description = "Quisquam aut porro.",
                            Image = new byte[] { 215, 218, 39, 238, 189, 52, 195, 24, 88, 134, 139, 109, 40, 173, 196, 178, 225, 153, 124, 36, 4, 244, 45, 48, 223, 31, 104, 21, 165, 223, 218, 231, 78, 211, 30, 68, 139, 122, 65, 8, 224, 65, 53, 220, 96, 244, 126, 155, 97, 43, 72, 47, 69, 164, 87, 226, 173, 246, 14, 158, 204, 173, 114, 120, 172, 163, 30, 84, 142, 127, 38, 102, 87, 115, 67, 194, 190, 80, 207, 235, 161, 204, 180, 121, 151, 171, 162, 169, 124, 59, 151, 148, 107, 163, 60, 50, 206, 188, 48, 189 },
                            IsDeleted = false,
                            MainColor = "maroon",
                            Name = "Rustic Wooden Pants",
                            PopularityScore = 19,
                            Price = 0m,
                            Size = "Small",
                            UpdatedAt = new DateTime(2024, 11, 14, 5, 22, 26, 222, DateTimeKind.Utc).AddTicks(5965)
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 3, 20, 16, 41, 26, 615, DateTimeKind.Utc).AddTicks(4858),
                            Description = "Aspernatur aut voluptatibus.",
                            Image = new byte[] { 249, 218, 242, 213, 38, 206, 52, 139, 220, 30, 135, 226, 120, 137, 189, 142, 67, 97, 31, 167, 41, 53, 119, 188, 199, 123, 251, 103, 71, 120, 124, 133, 190, 245, 144, 158, 207, 217, 178, 248, 23, 169, 66, 24, 107, 30, 238, 160, 149, 82, 18, 42, 225, 53, 21, 195, 98, 54, 13, 171, 210, 204, 68, 100, 161, 2, 36, 131, 248, 31, 190, 105, 174, 38, 144, 127, 242, 95, 81, 168, 140, 91, 210, 244, 102, 82, 164, 137, 224, 204, 59, 153, 204, 7, 38, 75, 101, 222, 118, 105 },
                            IsDeleted = false,
                            MainColor = "orchid",
                            Name = "Handcrafted Cotton Car",
                            PopularityScore = 78,
                            Price = 151.323291827143697m,
                            Size = "Large",
                            UpdatedAt = new DateTime(2024, 11, 5, 18, 27, 50, 454, DateTimeKind.Utc).AddTicks(6109)
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2023, 11, 15, 8, 36, 12, 904, DateTimeKind.Utc).AddTicks(9583),
                            Description = "Voluptatum odit magnam.",
                            Image = new byte[] { 27, 217, 190, 188, 142, 104, 165, 255, 95, 181, 132, 88, 201, 101, 183, 106, 165, 41, 195, 42, 79, 118, 193, 73, 175, 214, 142, 186, 233, 16, 30, 35, 46, 23, 3, 247, 20, 57, 35, 233, 78, 18, 79, 83, 118, 72, 93, 165, 201, 122, 219, 37, 125, 197, 210, 164, 24, 117, 13, 184, 217, 234, 21, 79, 151, 96, 42, 177, 97, 191, 86, 108, 5, 217, 220, 61, 38, 109, 210, 102, 120, 233, 240, 111, 53, 249, 165, 104, 68, 94, 223, 158, 44, 107, 16, 99, 252, 0, 187, 21 },
                            IsDeleted = false,
                            MainColor = "gold",
                            Name = "Rustic Metal Fish",
                            PopularityScore = 36,
                            Price = 8.638050181156997m,
                            Size = "Small",
                            UpdatedAt = new DateTime(2024, 11, 11, 7, 33, 14, 686, DateTimeKind.Utc).AddTicks(6253)
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 7, 11, 23, 30, 59, 194, DateTimeKind.Utc).AddTicks(4309),
                            Description = "At odit sint.",
                            Image = new byte[] { 60, 217, 137, 163, 247, 1, 21, 115, 227, 77, 129, 205, 26, 65, 176, 70, 8, 241, 102, 173, 117, 182, 10, 213, 150, 49, 33, 12, 139, 168, 192, 193, 157, 57, 117, 81, 88, 153, 148, 217, 133, 122, 92, 142, 129, 114, 205, 169, 253, 161, 164, 32, 26, 85, 144, 133, 206, 180, 12, 197, 223, 9, 231, 58, 141, 191, 47, 224, 203, 94, 238, 110, 92, 140, 40, 250, 90, 124, 83, 36, 100, 120, 14, 234, 4, 160, 167, 72, 169, 239, 131, 163, 140, 207, 250, 124, 146, 34, 1, 194 },
                            IsDeleted = false,
                            MainColor = "green",
                            Name = "Handcrafted Frozen Table",
                            PopularityScore = 95,
                            Price = 265.745365301959770m,
                            Size = "Large",
                            UpdatedAt = new DateTime(2024, 11, 2, 20, 38, 38, 918, DateTimeKind.Utc).AddTicks(6399)
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 3, 7, 16, 25, 45, 483, DateTimeKind.Utc).AddTicks(9048),
                            Description = "Incidunt aut repellendus.",
                            Image = new byte[] { 94, 216, 85, 138, 95, 155, 134, 230, 102, 229, 125, 67, 106, 29, 169, 34, 106, 185, 9, 48, 154, 247, 84, 97, 126, 141, 181, 95, 45, 65, 98, 95, 13, 92, 232, 171, 156, 248, 5, 202, 188, 226, 105, 201, 141, 156, 60, 174, 49, 200, 109, 27, 182, 229, 78, 102, 132, 243, 11, 210, 230, 39, 185, 37, 130, 30, 53, 14, 52, 254, 133, 113, 179, 63, 116, 183, 142, 139, 212, 225, 80, 6, 45, 100, 211, 71, 168, 39, 13, 129, 38, 168, 236, 51, 228, 148, 41, 68, 70, 110 },
                            IsDeleted = false,
                            MainColor = "white",
                            Name = "Intelligent Concrete Keyboard",
                            PopularityScore = 53,
                            Price = 0m,
                            Size = "Small",
                            UpdatedAt = new DateTime(2024, 11, 8, 9, 44, 3, 150, DateTimeKind.Utc).AddTicks(6555)
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 11, 2, 8, 20, 31, 773, DateTimeKind.Utc).AddTicks(3776),
                            Description = "Est aut illo.",
                            Image = new byte[] { 128, 216, 32, 113, 199, 53, 247, 90, 234, 125, 122, 184, 187, 249, 163, 254, 204, 129, 173, 179, 192, 56, 157, 237, 102, 232, 72, 177, 207, 217, 4, 253, 125, 126, 91, 5, 225, 88, 118, 187, 243, 75, 118, 4, 152, 199, 172, 179, 102, 239, 55, 22, 82, 117, 12, 71, 58, 51, 11, 223, 236, 69, 138, 16, 120, 125, 59, 60, 158, 158, 29, 116, 11, 242, 192, 117, 193, 153, 85, 159, 60, 149, 75, 223, 162, 238, 170, 7, 114, 19, 202, 174, 77, 151, 206, 173, 192, 102, 140, 26 },
                            IsDeleted = false,
                            MainColor = "turquoise",
                            Name = "Handmade Rubber Pizza",
                            PopularityScore = 11,
                            Price = 296.010970633482165m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2024, 11, 13, 22, 49, 27, 382, DateTimeKind.Utc).AddTicks(6703)
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2024, 6, 28, 23, 15, 18, 62, DateTimeKind.Utc).AddTicks(8500),
                            Description = "Maiores fugit voluptatem.",
                            Image = new byte[] { 162, 215, 236, 88, 48, 206, 104, 206, 109, 20, 119, 45, 11, 213, 156, 219, 46, 74, 80, 55, 229, 121, 231, 122, 78, 68, 219, 3, 113, 114, 166, 154, 236, 160, 205, 94, 37, 183, 231, 171, 41, 179, 131, 63, 163, 241, 27, 184, 154, 23, 0, 17, 239, 5, 202, 40, 240, 114, 10, 236, 243, 100, 92, 251, 109, 220, 65, 107, 7, 61, 181, 118, 98, 164, 13, 50, 245, 168, 214, 93, 40, 35, 105, 90, 113, 148, 171, 231, 214, 164, 110, 179, 173, 251, 184, 197, 86, 135, 209, 199 },
                            IsDeleted = false,
                            MainColor = "magenta",
                            Name = "Gorgeous Fresh Towels",
                            PopularityScore = 70,
                            Price = 127.432431771155702m,
                            Size = "Small",
                            UpdatedAt = new DateTime(2024, 11, 5, 11, 54, 51, 614, DateTimeKind.Utc).AddTicks(6847)
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2024, 2, 23, 16, 10, 4, 352, DateTimeKind.Utc).AddTicks(3227),
                            Description = "Commodi fugit officia.",
                            Image = new byte[] { 196, 215, 183, 64, 152, 104, 216, 65, 241, 172, 115, 163, 92, 177, 149, 183, 144, 18, 243, 186, 11, 186, 49, 6, 54, 159, 111, 86, 19, 10, 72, 56, 92, 194, 64, 184, 105, 23, 89, 156, 96, 27, 144, 122, 174, 27, 138, 188, 206, 62, 201, 12, 139, 149, 135, 9, 165, 177, 9, 249, 249, 130, 46, 231, 99, 58, 70, 153, 113, 221, 77, 121, 185, 87, 89, 239, 41, 182, 87, 26, 20, 178, 135, 213, 64, 59, 173, 198, 58, 54, 18, 184, 13, 96, 162, 222, 237, 169, 22, 115 },
                            IsDeleted = false,
                            MainColor = "cyan",
                            Name = "Licensed Wooden Bike",
                            PopularityScore = 28,
                            Price = 519.620786034325221m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2024, 11, 11, 1, 0, 15, 846, DateTimeKind.Utc).AddTicks(6990)
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2024, 10, 20, 7, 4, 50, 641, DateTimeKind.Utc).AddTicks(7955),
                            Description = "Quod sed at.",
                            Image = new byte[] { 230, 214, 131, 39, 0, 2, 73, 181, 116, 68, 112, 24, 173, 141, 143, 147, 243, 218, 151, 61, 49, 251, 122, 146, 30, 250, 2, 168, 181, 162, 234, 214, 204, 228, 178, 18, 173, 118, 202, 140, 151, 132, 157, 181, 185, 69, 250, 193, 2, 101, 147, 8, 39, 37, 69, 234, 91, 240, 9, 6, 0, 161, 255, 210, 89, 153, 76, 200, 218, 124, 229, 124, 16, 10, 165, 173, 93, 197, 217, 216, 0, 64, 165, 80, 15, 226, 174, 166, 159, 199, 182, 189, 109, 196, 140, 246, 132, 203, 92, 31 },
                            IsDeleted = false,
                            MainColor = "yellow",
                            Name = "Incredible Cotton Sausages",
                            PopularityScore = 87,
                            Price = 252.383289298221026m,
                            Size = "Large",
                            UpdatedAt = new DateTime(2024, 11, 2, 14, 5, 40, 78, DateTimeKind.Utc).AddTicks(7139)
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2024, 6, 15, 22, 59, 36, 931, DateTimeKind.Utc).AddTicks(2679),
                            Description = "Fugit sed quia.",
                            Image = new byte[] { 8, 214, 78, 14, 105, 156, 186, 41, 248, 219, 108, 142, 253, 105, 136, 111, 85, 162, 58, 192, 86, 60, 196, 31, 5, 86, 149, 251, 87, 59, 140, 116, 59, 6, 37, 108, 242, 214, 59, 125, 206, 236, 170, 240, 196, 111, 105, 198, 54, 140, 92, 3, 196, 181, 3, 204, 17, 47, 8, 19, 6, 191, 209, 189, 78, 248, 82, 246, 68, 28, 125, 126, 103, 189, 241, 106, 145, 211, 90, 150, 236, 207, 196, 203, 222, 137, 176, 133, 3, 89, 90, 194, 206, 40, 118, 15, 26, 237, 161, 204 },
                            IsDeleted = false,
                            MainColor = "orange",
                            Name = "Refined Soft Tuna",
                            PopularityScore = 45,
                            Price = 43.616438151624273m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2024, 11, 8, 3, 11, 4, 310, DateTimeKind.Utc).AddTicks(7281)
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2024, 2, 10, 15, 54, 23, 220, DateTimeKind.Utc).AddTicks(7407),
                            Description = "Quos quia reprehenderit.",
                            Image = new byte[] { 42, 213, 26, 245, 209, 53, 43, 156, 124, 115, 105, 3, 78, 69, 130, 75, 183, 106, 221, 67, 124, 125, 14, 171, 237, 177, 40, 77, 249, 211, 46, 18, 171, 41, 151, 198, 54, 54, 172, 109, 5, 84, 183, 43, 207, 153, 217, 202, 107, 179, 37, 254, 96, 70, 193, 173, 199, 111, 7, 32, 13, 221, 163, 168, 68, 87, 88, 37, 173, 188, 21, 129, 190, 112, 61, 39, 197, 226, 219, 83, 216, 93, 226, 69, 173, 48, 177, 101, 103, 234, 254, 199, 46, 140, 96, 39, 177, 15, 231, 120 },
                            IsDeleted = false,
                            MainColor = "sky blue",
                            Name = "Fantastic Steel Pants",
                            PopularityScore = 3,
                            Price = 108.774249401304143m,
                            Size = "Large",
                            UpdatedAt = new DateTime(2024, 11, 13, 16, 16, 28, 542, DateTimeKind.Utc).AddTicks(7427)
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2024, 10, 7, 6, 49, 9, 510, DateTimeKind.Utc).AddTicks(2133),
                            Description = "Accusamus quia expedita.",
                            Image = new byte[] { 75, 212, 229, 220, 57, 207, 156, 16, 255, 11, 102, 121, 158, 33, 123, 39, 25, 50, 129, 198, 162, 189, 87, 55, 213, 12, 188, 159, 155, 107, 209, 176, 27, 75, 10, 31, 122, 149, 29, 94, 60, 189, 196, 102, 219, 195, 72, 207, 159, 219, 238, 249, 252, 214, 127, 142, 125, 174, 7, 45, 19, 252, 116, 147, 58, 182, 93, 83, 23, 91, 172, 132, 21, 34, 138, 228, 248, 240, 92, 17, 196, 236, 0, 192, 124, 215, 179, 68, 204, 124, 162, 204, 142, 240, 74, 64, 72, 49, 44, 36 },
                            IsDeleted = false,
                            MainColor = "ivory",
                            Name = "Refined Plastic Chair",
                            PopularityScore = 62,
                            Price = 339.140616388591128m,
                            Size = "Small",
                            UpdatedAt = new DateTime(2024, 11, 5, 5, 21, 52, 774, DateTimeKind.Utc).AddTicks(7572)
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2024, 6, 2, 22, 43, 55, 799, DateTimeKind.Utc).AddTicks(6864),
                            Description = "Dolore consequuntur molestiae.",
                            Image = new byte[] { 109, 212, 177, 195, 162, 105, 12, 132, 131, 162, 98, 238, 239, 253, 116, 3, 124, 251, 36, 73, 199, 254, 161, 195, 189, 104, 79, 242, 61, 4, 115, 77, 138, 109, 124, 121, 191, 245, 142, 78, 115, 37, 209, 162, 230, 237, 184, 212, 211, 2, 184, 244, 153, 102, 60, 111, 51, 237, 6, 58, 26, 26, 70, 126, 47, 20, 99, 130, 128, 251, 68, 134, 108, 213, 214, 162, 44, 255, 221, 207, 176, 122, 30, 59, 75, 126, 180, 36, 48, 13, 70, 209, 238, 84, 52, 88, 223, 82, 114, 209 },
                            IsDeleted = false,
                            MainColor = "lavender",
                            Name = "Fantastic Rubber Fish",
                            PopularityScore = 20,
                            Price = 46.77527729551086m,
                            Size = "Large",
                            UpdatedAt = new DateTime(2024, 11, 10, 18, 27, 17, 6, DateTimeKind.Utc).AddTicks(7723)
                        });
                });

            modelBuilder.Entity("DAL.Entities.BouquetAddOn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddOnId")
                        .HasColumnType("integer")
                        .HasColumnName("add_on_id");

                    b.Property<int?>("BouquetId")
                        .HasColumnType("integer")
                        .HasColumnName("bouquet_id");

                    b.Property<int?>("CustomBouquetId")
                        .HasColumnType("integer")
                        .HasColumnName("custom_bouquet_id");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_bouquet_add_ons");

                    b.HasIndex("AddOnId")
                        .HasDatabaseName("ix_bouquet_add_ons_add_on_id");

                    b.HasIndex("BouquetId")
                        .HasDatabaseName("ix_bouquet_add_ons_bouquet_id");

                    b.HasIndex("CustomBouquetId")
                        .HasDatabaseName("ix_bouquet_add_ons_custom_bouquet_id");

                    b.ToTable("bouquet_add_ons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddOnId = 15,
                            BouquetId = 4,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 2,
                            AddOnId = 5,
                            CustomBouquetId = 13,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 3,
                            AddOnId = 26,
                            BouquetId = 21,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 4,
                            AddOnId = 17,
                            CustomBouquetId = 30,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 5,
                            AddOnId = 8,
                            BouquetId = 9,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 6,
                            AddOnId = 29,
                            CustomBouquetId = 18,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 7,
                            AddOnId = 20,
                            BouquetId = 27,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 8,
                            AddOnId = 11,
                            CustomBouquetId = 5,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 9,
                            AddOnId = 2,
                            BouquetId = 14,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 10,
                            AddOnId = 23,
                            CustomBouquetId = 23,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 11,
                            AddOnId = 14,
                            BouquetId = 2,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 12,
                            AddOnId = 5,
                            CustomBouquetId = 11,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 13,
                            AddOnId = 26,
                            CustomBouquetId = 19,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 14,
                            AddOnId = 17,
                            BouquetId = 28,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 15,
                            AddOnId = 8,
                            CustomBouquetId = 7,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 16,
                            AddOnId = 29,
                            BouquetId = 16,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 17,
                            AddOnId = 20,
                            CustomBouquetId = 25,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 18,
                            AddOnId = 11,
                            BouquetId = 3,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 19,
                            AddOnId = 2,
                            CustomBouquetId = 12,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 20,
                            AddOnId = 23,
                            BouquetId = 21,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 21,
                            AddOnId = 14,
                            CustomBouquetId = 30,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 22,
                            AddOnId = 5,
                            BouquetId = 9,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 23,
                            AddOnId = 26,
                            CustomBouquetId = 17,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 24,
                            AddOnId = 17,
                            BouquetId = 26,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 25,
                            AddOnId = 8,
                            CustomBouquetId = 5,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 26,
                            AddOnId = 29,
                            BouquetId = 14,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 27,
                            AddOnId = 20,
                            CustomBouquetId = 23,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 28,
                            AddOnId = 11,
                            BouquetId = 1,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 29,
                            AddOnId = 2,
                            CustomBouquetId = 10,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 30,
                            AddOnId = 23,
                            BouquetId = 19,
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("DAL.Entities.BouquetCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category_name");

                    b.HasKey("Id")
                        .HasName("pk_bouquet_categories");

                    b.ToTable("bouquet_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Wedding"
                        });
                });

            modelBuilder.Entity("DAL.Entities.BouquetCategoryBouquet", b =>
                {
                    b.Property<int>("BouquetId")
                        .HasColumnType("integer")
                        .HasColumnName("bouquet_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.HasKey("BouquetId", "CategoryId")
                        .HasName("pk_bouquet_category_bouquets");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_bouquet_category_bouquets_category_id");

                    b.ToTable("bouquet_category_bouquets", (string)null);

                    b.HasData(
                        new
                        {
                            BouquetId = 8,
                            CategoryId = 1
                        },
                        new
                        {
                            BouquetId = 24,
                            CategoryId = 1
                        },
                        new
                        {
                            BouquetId = 9,
                            CategoryId = 1
                        },
                        new
                        {
                            BouquetId = 25,
                            CategoryId = 1
                        },
                        new
                        {
                            BouquetId = 11,
                            CategoryId = 1
                        },
                        new
                        {
                            BouquetId = 26,
                            CategoryId = 1
                        },
                        new
                        {
                            BouquetId = 12,
                            CategoryId = 1
                        },
                        new
                        {
                            BouquetId = 28,
                            CategoryId = 1
                        },
                        new
                        {
                            BouquetId = 13,
                            CategoryId = 1
                        },
                        new
                        {
                            BouquetId = 29,
                            CategoryId = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.BouquetFlower", b =>
                {
                    b.Property<int>("BouquetId")
                        .HasColumnType("integer")
                        .HasColumnName("bouquet_id");

                    b.Property<int>("FlowerId")
                        .HasColumnType("integer")
                        .HasColumnName("flower_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("BouquetId", "FlowerId")
                        .HasName("pk_bouquet_flowers");

                    b.HasIndex("FlowerId")
                        .HasDatabaseName("ix_bouquet_flowers_flower_id");

                    b.ToTable("bouquet_flowers", (string)null);

                    b.HasData(
                        new
                        {
                            BouquetId = 8,
                            FlowerId = 4,
                            Quantity = 5
                        },
                        new
                        {
                            BouquetId = 24,
                            FlowerId = 13,
                            Quantity = 2
                        },
                        new
                        {
                            BouquetId = 9,
                            FlowerId = 21,
                            Quantity = 9
                        },
                        new
                        {
                            BouquetId = 25,
                            FlowerId = 30,
                            Quantity = 6
                        },
                        new
                        {
                            BouquetId = 11,
                            FlowerId = 9,
                            Quantity = 3
                        },
                        new
                        {
                            BouquetId = 26,
                            FlowerId = 18,
                            Quantity = 10
                        },
                        new
                        {
                            BouquetId = 12,
                            FlowerId = 27,
                            Quantity = 7
                        },
                        new
                        {
                            BouquetId = 28,
                            FlowerId = 5,
                            Quantity = 4
                        },
                        new
                        {
                            BouquetId = 13,
                            FlowerId = 14,
                            Quantity = 1
                        },
                        new
                        {
                            BouquetId = 29,
                            FlowerId = 23,
                            Quantity = 8
                        },
                        new
                        {
                            BouquetId = 15,
                            FlowerId = 2,
                            Quantity = 5
                        },
                        new
                        {
                            BouquetId = 30,
                            FlowerId = 11,
                            Quantity = 2
                        },
                        new
                        {
                            BouquetId = 16,
                            FlowerId = 19,
                            Quantity = 9
                        },
                        new
                        {
                            BouquetId = 2,
                            FlowerId = 28,
                            Quantity = 6
                        },
                        new
                        {
                            BouquetId = 17,
                            FlowerId = 7,
                            Quantity = 3
                        },
                        new
                        {
                            BouquetId = 3,
                            FlowerId = 16,
                            Quantity = 10
                        },
                        new
                        {
                            BouquetId = 19,
                            FlowerId = 25,
                            Quantity = 7
                        },
                        new
                        {
                            BouquetId = 4,
                            FlowerId = 3,
                            Quantity = 4
                        },
                        new
                        {
                            BouquetId = 20,
                            FlowerId = 12,
                            Quantity = 1
                        },
                        new
                        {
                            BouquetId = 6,
                            FlowerId = 21,
                            Quantity = 8
                        },
                        new
                        {
                            BouquetId = 21,
                            FlowerId = 30,
                            Quantity = 5
                        },
                        new
                        {
                            BouquetId = 7,
                            FlowerId = 9,
                            Quantity = 2
                        },
                        new
                        {
                            BouquetId = 23,
                            FlowerId = 17,
                            Quantity = 9
                        },
                        new
                        {
                            BouquetId = 8,
                            FlowerId = 26,
                            Quantity = 6
                        },
                        new
                        {
                            BouquetId = 24,
                            FlowerId = 5,
                            Quantity = 3
                        },
                        new
                        {
                            BouquetId = 10,
                            FlowerId = 14,
                            Quantity = 10
                        },
                        new
                        {
                            BouquetId = 25,
                            FlowerId = 23,
                            Quantity = 7
                        },
                        new
                        {
                            BouquetId = 11,
                            FlowerId = 1,
                            Quantity = 4
                        },
                        new
                        {
                            BouquetId = 27,
                            FlowerId = 10,
                            Quantity = 1
                        },
                        new
                        {
                            BouquetId = 12,
                            FlowerId = 19,
                            Quantity = 8
                        });
                });

            modelBuilder.Entity("DAL.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BouquetId")
                        .HasColumnType("integer")
                        .HasColumnName("bouquet_id");

                    b.Property<int>("CartId")
                        .HasColumnType("integer")
                        .HasColumnName("cart_id");

                    b.Property<int?>("CustomBouquetId")
                        .HasColumnType("integer")
                        .HasColumnName("custom_bouquet_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("NUMERIC(10, 2)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_cart_items");

                    b.HasIndex("BouquetId")
                        .HasDatabaseName("ix_cart_items_bouquet_id");

                    b.HasIndex("CartId")
                        .HasDatabaseName("ix_cart_items_cart_id");

                    b.HasIndex("CustomBouquetId")
                        .HasDatabaseName("ix_cart_items_custom_bouquet_id");

                    b.ToTable("cart_items", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BouquetId = 15,
                            CartId = 24,
                            Price = 0m,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 2,
                            BouquetId = 5,
                            CartId = 25,
                            Price = 0m,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 3,
                            CartId = 24,
                            CustomBouquetId = 26,
                            Price = 0m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 4,
                            CartId = 20,
                            CustomBouquetId = 17,
                            Price = 0m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 5,
                            BouquetId = 8,
                            CartId = 30,
                            Price = 0m,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 6,
                            CartId = 20,
                            CustomBouquetId = 29,
                            Price = 0m,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 7,
                            CartId = 30,
                            CustomBouquetId = 20,
                            Price = 0m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 8,
                            BouquetId = 11,
                            CartId = 21,
                            Price = 0m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 9,
                            BouquetId = 2,
                            CartId = 9,
                            Price = 0m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 10,
                            CartId = 21,
                            CustomBouquetId = 23,
                            Price = 0m,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 11,
                            BouquetId = 14,
                            CartId = 9,
                            Price = 0m,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 12,
                            BouquetId = 5,
                            CartId = 21,
                            Price = 0m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 13,
                            CartId = 26,
                            CustomBouquetId = 26,
                            Price = 0m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 14,
                            CartId = 23,
                            CustomBouquetId = 17,
                            Price = 0m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 15,
                            BouquetId = 8,
                            CartId = 26,
                            Price = 0m,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 16,
                            CartId = 23,
                            CustomBouquetId = 29,
                            Price = 0m,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 17,
                            CartId = 17,
                            CustomBouquetId = 20,
                            Price = 0m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 18,
                            BouquetId = 11,
                            CartId = 18,
                            Price = 0m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 19,
                            BouquetId = 2,
                            CartId = 17,
                            Price = 0m,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 20,
                            CartId = 18,
                            CustomBouquetId = 23,
                            Price = 0m,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 21,
                            CartId = 17,
                            CustomBouquetId = 14,
                            Price = 0m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 22,
                            BouquetId = 5,
                            CartId = 24,
                            Price = 0m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 23,
                            CartId = 25,
                            CustomBouquetId = 26,
                            Price = 0m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 24,
                            CartId = 24,
                            CustomBouquetId = 17,
                            Price = 0m,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 25,
                            BouquetId = 8,
                            CartId = 25,
                            Price = 0m,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 26,
                            BouquetId = 29,
                            CartId = 30,
                            Price = 0m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 27,
                            CartId = 20,
                            CustomBouquetId = 20,
                            Price = 0m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 28,
                            BouquetId = 11,
                            CartId = 30,
                            Price = 0m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 29,
                            BouquetId = 2,
                            CartId = 20,
                            Price = 0m,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 30,
                            CartId = 30,
                            CustomBouquetId = 23,
                            Price = 0m,
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("DAL.Entities.CartItemAddOn", b =>
                {
                    b.Property<int>("CartItemId")
                        .HasColumnType("integer")
                        .HasColumnName("cart_item_id");

                    b.Property<int>("AddOnId")
                        .HasColumnType("integer")
                        .HasColumnName("add_on_id");

                    b.Property<string>("CardNote")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("card_note");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("CartItemId", "AddOnId")
                        .HasName("pk_cart_item_add_ons");

                    b.HasIndex("AddOnId")
                        .HasDatabaseName("ix_cart_item_add_ons_add_on_id");

                    b.ToTable("cart_item_add_ons", (string)null);

                    b.HasData(
                        new
                        {
                            CartItemId = 13,
                            AddOnId = 11,
                            CardNote = "Aut totam est expedita.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 23,
                            AddOnId = 1,
                            CardNote = "Ea dolorem maiores aut nemo et dignissimos tempora aut.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 8,
                            AddOnId = 29,
                            CardNote = "Optio et velit natus dolor.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 8,
                            AddOnId = 18,
                            CardNote = "Doloribus error velit aut illo optio ducimus rem placeat.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 5,
                            AddOnId = 29,
                            CardNote = "Veniam voluptatem fuga laudantium non.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 22,
                            AddOnId = 5,
                            CardNote = "In sapiente quo repudiandae et deserunt qui quisquam corrupti.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 29,
                            AddOnId = 26,
                            CardNote = "Accusamus distinctio illo consequatur cum ipsa.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 22,
                            AddOnId = 4,
                            CardNote = "Dolorem ea ut illum unde quos blanditiis delectus modi amet.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 29,
                            AddOnId = 3,
                            CardNote = "Praesentium inventore deleniti enim nihil itaque.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 9,
                            AddOnId = 16,
                            CardNote = "Facere possimus eligendi quisquam ullam iure praesentium numquam sapiente distinctio.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 29,
                            AddOnId = 11,
                            CardNote = "Quae blanditiis et ipsum ipsum fugiat.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 26,
                            AddOnId = 27,
                            CardNote = "Laboriosam sequi sed fuga quae veniam laudantium laudantium optio dolores.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 18,
                            AddOnId = 3,
                            CardNote = "Harum at sit architecto sint qui delectus.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 16,
                            AddOnId = 24,
                            CardNote = "Molestiae omnis unde.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 25,
                            AddOnId = 25,
                            CardNote = "Eius magnam omnis reiciendis libero et delectus.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 13,
                            AddOnId = 17,
                            CardNote = "Excepturi tenetur aut.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 3,
                            AddOnId = 17,
                            CardNote = "Aut et amet aut esse cupiditate ut.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 9,
                            AddOnId = 30,
                            CardNote = "Aspernatur aliquid in sit.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 9,
                            AddOnId = 9,
                            CardNote = "Reprehenderit ab laborum repellendus neque quam aut voluptas.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 2,
                            AddOnId = 27,
                            CardNote = "Nobis placeat dolorem ut.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 1,
                            AddOnId = 23,
                            CardNote = "Reiciendis ducimus ipsa est voluptates ipsam reiciendis in.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 24,
                            AddOnId = 23,
                            CardNote = "Enim ratione aliquam eos.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 23,
                            AddOnId = 8,
                            CardNote = "Error nulla totam officia expedita non voluptatibus qui.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 20,
                            AddOnId = 15,
                            CardNote = "Vero perspiciatis soluta ipsa provident.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 22,
                            AddOnId = 30,
                            CardNote = "Sequi et saepe quos voluptate odit maiores quasi quos.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 17,
                            AddOnId = 15,
                            CardNote = "Ducimus earum odit rerum minima.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 6,
                            AddOnId = 17,
                            CardNote = "Quod rerum voluptatem qui sequi alias maiores voluptatem incidunt.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 14,
                            AddOnId = 15,
                            CardNote = "Aperiam laboriosam sed pariatur accusantium.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 4,
                            AddOnId = 18,
                            CardNote = "Voluptas eaque placeat ullam ut ut doloribus error delectus expedita.",
                            Quantity = 0
                        },
                        new
                        {
                            CartItemId = 15,
                            AddOnId = 21,
                            CardNote = "Dolorum id sapiente placeat omnis ut.",
                            Quantity = 0
                        });
                });

            modelBuilder.Entity("DAL.Entities.CustomBouquet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("NUMERIC(10, 2)")
                        .HasColumnName("total_price");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_custom_bouquets");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_custom_bouquets_user_id");

                    b.ToTable("custom_bouquets", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 11, 4, 6, 49, 916, DateTimeKind.Utc).AddTicks(8756),
                            TotalPrice = 0m,
                            UserId = 8
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 2, 8, 51, 8, 860, DateTimeKind.Utc).AddTicks(2313),
                            TotalPrice = 105.867808293489768m,
                            UserId = 24
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 10, 24, 12, 35, 27, 803, DateTimeKind.Utc).AddTicks(4446),
                            TotalPrice = 476.396963147631180m,
                            UserId = 9
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 10, 15, 17, 19, 46, 746, DateTimeKind.Utc).AddTicks(6567),
                            TotalPrice = 173.537385522172556m,
                            UserId = 25
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 11, 5, 23, 4, 5, 689, DateTimeKind.Utc).AddTicks(8688),
                            TotalPrice = 91.252610928496615m,
                            UserId = 11
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 10, 28, 3, 48, 24, 633, DateTimeKind.Utc).AddTicks(798),
                            TotalPrice = 183.134031854166448m,
                            UserId = 26
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 10, 19, 7, 32, 43, 576, DateTimeKind.Utc).AddTicks(2904),
                            TotalPrice = 73.9354806448963714m,
                            UserId = 12
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 11, 9, 13, 17, 2, 519, DateTimeKind.Utc).AddTicks(5010),
                            TotalPrice = 426.036659462394543m,
                            UserId = 28
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 10, 31, 18, 1, 21, 462, DateTimeKind.Utc).AddTicks(7118),
                            TotalPrice = 206.025785835937254m,
                            UserId = 13
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 10, 22, 21, 45, 40, 405, DateTimeKind.Utc).AddTicks(9224),
                            TotalPrice = 293.673084629547576m,
                            UserId = 29
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 11, 13, 3, 29, 59, 349, DateTimeKind.Utc).AddTicks(1329),
                            TotalPrice = 117.0003152019345961m,
                            UserId = 15
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 11, 4, 8, 14, 18, 292, DateTimeKind.Utc).AddTicks(3435),
                            TotalPrice = 266.1713617449492254m,
                            UserId = 30
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 10, 26, 11, 58, 37, 235, DateTimeKind.Utc).AddTicks(5541),
                            TotalPrice = 77.167749268546587m,
                            UserId = 16
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 10, 17, 16, 42, 56, 178, DateTimeKind.Utc).AddTicks(7654),
                            TotalPrice = 0m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 11, 7, 22, 27, 15, 121, DateTimeKind.Utc).AddTicks(9762),
                            TotalPrice = 45.669674235707860m,
                            UserId = 17
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 10, 30, 3, 11, 34, 65, DateTimeKind.Utc).AddTicks(1867),
                            TotalPrice = 30.5183782347097977m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 10, 21, 6, 55, 53, 8, DateTimeKind.Utc).AddTicks(3975),
                            TotalPrice = 157.003733654042535m,
                            UserId = 19
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 11, 11, 12, 40, 11, 951, DateTimeKind.Utc).AddTicks(6084),
                            TotalPrice = 33.416362685810985m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 11, 2, 17, 24, 30, 894, DateTimeKind.Utc).AddTicks(8190),
                            TotalPrice = 128.150971548702002m,
                            UserId = 20
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 10, 24, 21, 8, 49, 838, DateTimeKind.Utc).AddTicks(297),
                            TotalPrice = 8.638050181156997m,
                            UserId = 6
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 10, 16, 1, 53, 8, 781, DateTimeKind.Utc).AddTicks(2403),
                            TotalPrice = 185.727288911923320m,
                            UserId = 21
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 11, 6, 7, 37, 27, 724, DateTimeKind.Utc).AddTicks(4508),
                            TotalPrice = 0m,
                            UserId = 7
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 10, 28, 12, 21, 46, 667, DateTimeKind.Utc).AddTicks(6622),
                            TotalPrice = 355.824985523626779m,
                            UserId = 23
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2024, 10, 19, 16, 6, 5, 610, DateTimeKind.Utc).AddTicks(8729),
                            TotalPrice = 127.432431771155702m,
                            UserId = 8
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2024, 11, 9, 21, 50, 24, 554, DateTimeKind.Utc).AddTicks(834),
                            TotalPrice = 525.099997071595582m,
                            UserId = 24
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 34, 43, 497, DateTimeKind.Utc).AddTicks(2942),
                            TotalPrice = 181.405193815662030m,
                            UserId = 10
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2024, 10, 23, 6, 19, 2, 440, DateTimeKind.Utc).AddTicks(5045),
                            TotalPrice = 38.137227114353912m,
                            UserId = 25
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2024, 11, 13, 12, 3, 21, 383, DateTimeKind.Utc).AddTicks(7149),
                            TotalPrice = 55.540677789384896m,
                            UserId = 11
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2024, 11, 4, 16, 47, 40, 326, DateTimeKind.Utc).AddTicks(9256),
                            TotalPrice = 339.140616388591128m,
                            UserId = 27
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2024, 10, 26, 20, 31, 59, 270, DateTimeKind.Utc).AddTicks(1360),
                            TotalPrice = 111.018685611439244m,
                            UserId = 12
                        });
                });

            modelBuilder.Entity("DAL.Entities.CustomBouquetFlower", b =>
                {
                    b.Property<int>("CustomBouquetId")
                        .HasColumnType("integer")
                        .HasColumnName("custom_bouquet_id");

                    b.Property<int>("FlowerId")
                        .HasColumnType("integer")
                        .HasColumnName("flower_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("CustomBouquetId", "FlowerId")
                        .HasName("pk_custom_bouquet_flowers");

                    b.HasIndex("FlowerId")
                        .HasDatabaseName("ix_custom_bouquet_flowers_flower_id");

                    b.ToTable("custom_bouquet_flowers", (string)null);

                    b.HasData(
                        new
                        {
                            CustomBouquetId = 8,
                            FlowerId = 4,
                            Quantity = 5
                        },
                        new
                        {
                            CustomBouquetId = 24,
                            FlowerId = 13,
                            Quantity = 2
                        },
                        new
                        {
                            CustomBouquetId = 9,
                            FlowerId = 21,
                            Quantity = 9
                        },
                        new
                        {
                            CustomBouquetId = 25,
                            FlowerId = 30,
                            Quantity = 6
                        },
                        new
                        {
                            CustomBouquetId = 11,
                            FlowerId = 9,
                            Quantity = 3
                        },
                        new
                        {
                            CustomBouquetId = 26,
                            FlowerId = 18,
                            Quantity = 10
                        },
                        new
                        {
                            CustomBouquetId = 12,
                            FlowerId = 27,
                            Quantity = 7
                        },
                        new
                        {
                            CustomBouquetId = 28,
                            FlowerId = 5,
                            Quantity = 4
                        },
                        new
                        {
                            CustomBouquetId = 13,
                            FlowerId = 14,
                            Quantity = 1
                        },
                        new
                        {
                            CustomBouquetId = 29,
                            FlowerId = 23,
                            Quantity = 8
                        },
                        new
                        {
                            CustomBouquetId = 15,
                            FlowerId = 2,
                            Quantity = 5
                        },
                        new
                        {
                            CustomBouquetId = 30,
                            FlowerId = 11,
                            Quantity = 2
                        },
                        new
                        {
                            CustomBouquetId = 16,
                            FlowerId = 19,
                            Quantity = 9
                        },
                        new
                        {
                            CustomBouquetId = 2,
                            FlowerId = 28,
                            Quantity = 6
                        },
                        new
                        {
                            CustomBouquetId = 17,
                            FlowerId = 7,
                            Quantity = 3
                        },
                        new
                        {
                            CustomBouquetId = 3,
                            FlowerId = 16,
                            Quantity = 10
                        },
                        new
                        {
                            CustomBouquetId = 19,
                            FlowerId = 25,
                            Quantity = 7
                        },
                        new
                        {
                            CustomBouquetId = 4,
                            FlowerId = 3,
                            Quantity = 4
                        },
                        new
                        {
                            CustomBouquetId = 20,
                            FlowerId = 12,
                            Quantity = 1
                        },
                        new
                        {
                            CustomBouquetId = 6,
                            FlowerId = 21,
                            Quantity = 8
                        },
                        new
                        {
                            CustomBouquetId = 21,
                            FlowerId = 30,
                            Quantity = 5
                        },
                        new
                        {
                            CustomBouquetId = 7,
                            FlowerId = 9,
                            Quantity = 2
                        },
                        new
                        {
                            CustomBouquetId = 23,
                            FlowerId = 17,
                            Quantity = 9
                        },
                        new
                        {
                            CustomBouquetId = 8,
                            FlowerId = 26,
                            Quantity = 6
                        },
                        new
                        {
                            CustomBouquetId = 24,
                            FlowerId = 5,
                            Quantity = 3
                        },
                        new
                        {
                            CustomBouquetId = 10,
                            FlowerId = 14,
                            Quantity = 10
                        },
                        new
                        {
                            CustomBouquetId = 25,
                            FlowerId = 23,
                            Quantity = 7
                        },
                        new
                        {
                            CustomBouquetId = 11,
                            FlowerId = 1,
                            Quantity = 4
                        },
                        new
                        {
                            CustomBouquetId = 27,
                            FlowerId = 10,
                            Quantity = 1
                        },
                        new
                        {
                            CustomBouquetId = 12,
                            FlowerId = 19,
                            Quantity = 8
                        });
                });

            modelBuilder.Entity("DAL.Entities.Flower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("available_quantity");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("BYTEA")
                        .HasColumnName("image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("NUMERIC(10, 2)")
                        .HasColumnName("price");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_flowers");

                    b.HasIndex("Color")
                        .HasDatabaseName("ix_flowers_color");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_flowers_type_id");

                    b.ToTable("flowers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableQuantity = 77,
                            Color = "yellow",
                            CreatedAt = new DateTime(2024, 4, 24, 11, 10, 35, 489, DateTimeKind.Utc).AddTicks(2317),
                            Image = new byte[] { 64, 151, 228, 163, 149, 207, 255, 70, 105, 156, 115, 196, 161, 205, 16, 52, 19, 91, 78, 163, 111, 132, 165, 74, 223, 122, 14, 160, 156, 227, 193, 23, 108, 228, 142, 130, 78, 2, 33, 190, 15, 59, 83, 88, 240, 163, 40, 24, 75, 233, 145, 235, 129, 227, 18, 188, 241, 154, 196, 26, 193, 94, 169, 134, 218, 91, 87, 189, 63, 142, 230, 16, 57, 143, 147, 52, 48, 77, 90, 60, 82, 246, 85, 179, 81, 214, 149, 137, 209, 210, 144, 180, 62, 7, 253, 177, 146, 205, 125, 148 },
                            IsDeleted = false,
                            Name = "Rose yellow",
                            Price = 23.883523313740054m,
                            TypeId = 1,
                            UpdatedAt = new DateTime(2024, 11, 10, 5, 1, 28, 344, DateTimeKind.Utc).AddTicks(2334)
                        },
                        new
                        {
                            Id = 2,
                            AvailableQuantity = 99,
                            Color = "maroon",
                            CreatedAt = new DateTime(2023, 12, 23, 12, 46, 19, 261, DateTimeKind.Utc).AddTicks(2184),
                            Image = new byte[] { 36, 185, 227, 111, 124, 56, 152, 183, 221, 32, 11, 193, 22, 30, 236, 46, 240, 189, 22, 70, 242, 169, 230, 147, 108, 98, 105, 51, 239, 133, 90, 185, 10, 83, 176, 245, 168, 71, 129, 47, 255, 114, 188, 101, 43, 174, 82, 135, 80, 29, 184, 180, 125, 127, 163, 122, 210, 79, 3, 25, 206, 100, 199, 87, 198, 81, 182, 194, 109, 247, 134, 168, 60, 230, 70, 128, 237, 129, 104, 189, 16, 226, 227, 209, 204, 165, 60, 139, 176, 54, 34, 88, 67, 103, 97, 155, 170, 100, 159, 217 },
                            IsDeleted = false,
                            Name = "Orchid maroon",
                            Price = 9.133934847141572m,
                            TypeId = 3,
                            UpdatedAt = new DateTime(2024, 11, 4, 22, 14, 43, 143, DateTimeKind.Utc).AddTicks(4037)
                        },
                        new
                        {
                            Id = 3,
                            AvailableQuantity = 20,
                            Color = "magenta",
                            CreatedAt = new DateTime(2024, 8, 22, 12, 22, 3, 33, DateTimeKind.Utc).AddTicks(1850),
                            Image = new byte[] { 7, 219, 227, 58, 99, 160, 50, 39, 80, 164, 163, 189, 140, 110, 200, 39, 204, 31, 222, 234, 117, 207, 39, 221, 248, 74, 197, 199, 65, 39, 242, 91, 168, 195, 210, 103, 1, 139, 224, 160, 240, 169, 36, 114, 102, 185, 124, 247, 84, 82, 223, 125, 120, 27, 51, 56, 179, 5, 66, 24, 219, 107, 230, 41, 177, 71, 21, 200, 155, 97, 37, 64, 62, 61, 249, 204, 171, 181, 119, 62, 205, 206, 114, 239, 71, 116, 227, 140, 144, 154, 179, 252, 72, 199, 197, 133, 195, 250, 193, 31 },
                            IsDeleted = false,
                            Name = "Rose magenta",
                            Price = 43.384346380543139m,
                            TypeId = 1,
                            UpdatedAt = new DateTime(2024, 11, 13, 15, 27, 57, 942, DateTimeKind.Utc).AddTicks(5632)
                        },
                        new
                        {
                            Id = 4,
                            AvailableQuantity = 41,
                            Color = "silver",
                            CreatedAt = new DateTime(2024, 4, 21, 12, 57, 46, 805, DateTimeKind.Utc).AddTicks(1507),
                            Image = new byte[] { 235, 253, 226, 6, 74, 8, 204, 152, 196, 39, 58, 186, 1, 191, 164, 32, 168, 129, 166, 141, 249, 245, 104, 39, 132, 50, 32, 90, 147, 201, 139, 253, 70, 51, 245, 218, 91, 207, 64, 17, 225, 224, 140, 127, 161, 196, 166, 102, 89, 134, 6, 70, 115, 184, 195, 245, 148, 187, 129, 24, 232, 113, 4, 251, 156, 60, 116, 206, 202, 202, 197, 216, 65, 148, 172, 24, 104, 232, 133, 191, 139, 186, 0, 13, 194, 68, 138, 142, 111, 255, 69, 160, 78, 40, 41, 111, 219, 145, 227, 100 },
                            IsDeleted = false,
                            Name = "Orchid silver",
                            Price = 28.634757913944657m,
                            TypeId = 3,
                            UpdatedAt = new DateTime(2024, 11, 8, 8, 41, 12, 741, DateTimeKind.Utc).AddTicks(7219)
                        },
                        new
                        {
                            Id = 5,
                            AvailableQuantity = 63,
                            Color = "black",
                            CreatedAt = new DateTime(2023, 12, 20, 14, 33, 30, 577, DateTimeKind.Utc).AddTicks(1157),
                            Image = new byte[] { 206, 30, 226, 209, 49, 113, 101, 9, 56, 171, 210, 183, 118, 16, 128, 26, 132, 228, 110, 48, 124, 26, 169, 112, 16, 26, 124, 237, 230, 107, 35, 159, 228, 162, 23, 76, 181, 20, 159, 130, 209, 23, 245, 140, 220, 207, 208, 213, 94, 186, 46, 16, 110, 84, 83, 179, 117, 113, 193, 23, 245, 120, 35, 204, 135, 50, 210, 212, 248, 52, 100, 112, 68, 235, 95, 100, 37, 28, 148, 65, 73, 166, 143, 43, 60, 19, 49, 143, 79, 99, 215, 67, 83, 136, 141, 89, 244, 40, 4, 170 },
                            IsDeleted = false,
                            Name = "Tulip black",
                            Price = 13.885169447346224m,
                            TypeId = 2,
                            UpdatedAt = new DateTime(2024, 11, 3, 1, 54, 27, 540, DateTimeKind.Utc).AddTicks(8802)
                        },
                        new
                        {
                            Id = 6,
                            AvailableQuantity = 84,
                            Color = "salmon",
                            CreatedAt = new DateTime(2024, 8, 19, 14, 9, 14, 349, DateTimeKind.Utc).AddTicks(807),
                            Image = new byte[] { 177, 64, 225, 157, 24, 217, 255, 122, 171, 46, 106, 179, 236, 96, 92, 19, 96, 70, 55, 212, 255, 64, 234, 186, 157, 1, 215, 129, 56, 13, 187, 66, 130, 18, 57, 191, 15, 88, 255, 243, 194, 78, 93, 153, 23, 219, 251, 69, 98, 238, 85, 217, 105, 240, 227, 113, 86, 39, 0, 22, 2, 126, 65, 158, 114, 40, 49, 217, 39, 157, 4, 8, 70, 67, 18, 177, 227, 80, 162, 194, 6, 145, 30, 73, 183, 226, 216, 145, 46, 199, 104, 231, 88, 232, 241, 67, 12, 190, 38, 239 },
                            IsDeleted = false,
                            Name = "Orchid salmon",
                            Price = 48.135580980747742m,
                            TypeId = 3,
                            UpdatedAt = new DateTime(2024, 11, 11, 19, 7, 42, 340, DateTimeKind.Utc).AddTicks(384)
                        },
                        new
                        {
                            Id = 7,
                            AvailableQuantity = 5,
                            Color = "cyan",
                            CreatedAt = new DateTime(2024, 4, 18, 14, 44, 58, 121, DateTimeKind.Utc).AddTicks(456),
                            Image = new byte[] { 149, 98, 225, 104, 255, 65, 153, 234, 31, 178, 1, 176, 97, 177, 56, 13, 60, 168, 255, 119, 130, 102, 42, 4, 41, 233, 50, 20, 139, 175, 84, 228, 31, 130, 91, 49, 104, 156, 95, 101, 178, 132, 197, 166, 82, 230, 37, 180, 103, 34, 124, 162, 100, 141, 115, 47, 55, 221, 63, 22, 15, 133, 95, 112, 94, 29, 144, 223, 85, 6, 164, 160, 73, 154, 196, 253, 160, 132, 177, 67, 196, 125, 172, 104, 50, 177, 127, 146, 14, 44, 250, 139, 93, 72, 85, 45, 37, 85, 72, 53 },
                            IsDeleted = false,
                            Name = "Tulip cyan",
                            Price = 33.38599251414926m,
                            TypeId = 2,
                            UpdatedAt = new DateTime(2024, 11, 6, 12, 20, 57, 139, DateTimeKind.Utc).AddTicks(1965)
                        },
                        new
                        {
                            Id = 8,
                            AvailableQuantity = 26,
                            Color = "mint green",
                            CreatedAt = new DateTime(2023, 12, 17, 16, 20, 41, 893, DateTimeKind.Utc).AddTicks(114),
                            Image = new byte[] { 120, 132, 224, 52, 230, 170, 51, 91, 147, 53, 153, 173, 215, 1, 20, 6, 24, 10, 199, 26, 5, 139, 107, 77, 181, 209, 142, 167, 221, 81, 236, 134, 189, 241, 125, 164, 194, 224, 190, 214, 163, 187, 46, 179, 141, 241, 79, 36, 108, 87, 163, 108, 95, 41, 3, 237, 24, 146, 126, 21, 28, 139, 126, 65, 73, 19, 239, 229, 132, 112, 67, 55, 76, 241, 119, 73, 93, 184, 191, 196, 130, 105, 59, 134, 173, 128, 38, 148, 238, 144, 139, 47, 98, 169, 186, 23, 61, 236, 106, 122 },
                            IsDeleted = false,
                            Name = "Orchid mint green",
                            Price = 18.636404047550827m,
                            TypeId = 3,
                            UpdatedAt = new DateTime(2024, 11, 1, 5, 34, 11, 938, DateTimeKind.Utc).AddTicks(3557)
                        },
                        new
                        {
                            Id = 9,
                            AvailableQuantity = 48,
                            Color = "turquoise",
                            CreatedAt = new DateTime(2024, 8, 16, 15, 56, 25, 664, DateTimeKind.Utc).AddTicks(9763),
                            Image = new byte[] { 92, 166, 223, 255, 206, 18, 204, 204, 6, 185, 49, 169, 76, 82, 240, 255, 245, 109, 143, 190, 136, 177, 172, 151, 66, 185, 233, 58, 47, 243, 132, 40, 91, 97, 159, 23, 28, 37, 30, 71, 147, 242, 150, 192, 201, 252, 121, 147, 113, 139, 202, 53, 90, 197, 147, 170, 249, 72, 189, 20, 41, 146, 156, 19, 52, 9, 78, 235, 178, 217, 227, 207, 78, 72, 42, 149, 26, 236, 206, 69, 63, 85, 201, 164, 40, 79, 205, 149, 205, 244, 29, 211, 103, 9, 30, 1, 86, 130, 140, 191 },
                            IsDeleted = false,
                            Name = "Tulip turquoise",
                            Price = 3.8868155809523597m,
                            TypeId = 2,
                            UpdatedAt = new DateTime(2024, 11, 9, 22, 47, 26, 737, DateTimeKind.Utc).AddTicks(5137)
                        },
                        new
                        {
                            Id = 10,
                            AvailableQuantity = 69,
                            Color = "ivory",
                            CreatedAt = new DateTime(2024, 4, 15, 16, 32, 9, 436, DateTimeKind.Utc).AddTicks(9410),
                            Image = new byte[] { 63, 200, 223, 203, 181, 122, 102, 61, 122, 60, 200, 166, 194, 163, 204, 249, 209, 207, 87, 97, 11, 214, 237, 224, 206, 161, 68, 206, 130, 149, 29, 202, 249, 209, 194, 137, 118, 105, 125, 184, 132, 41, 254, 205, 4, 7, 163, 3, 117, 191, 242, 254, 86, 98, 36, 104, 218, 254, 253, 20, 54, 152, 186, 229, 31, 254, 172, 240, 225, 67, 131, 103, 81, 159, 221, 226, 216, 31, 220, 198, 253, 65, 88, 194, 163, 30, 116, 151, 173, 89, 174, 119, 108, 105, 130, 235, 110, 25, 174, 5 },
                            IsDeleted = false,
                            Name = "Orchid ivory",
                            Price = 38.137227114353912m,
                            TypeId = 3,
                            UpdatedAt = new DateTime(2024, 11, 4, 16, 0, 41, 536, DateTimeKind.Utc).AddTicks(6716)
                        },
                        new
                        {
                            Id = 11,
                            AvailableQuantity = 91,
                            Color = "green",
                            CreatedAt = new DateTime(2023, 12, 14, 18, 7, 53, 208, DateTimeKind.Utc).AddTicks(9057),
                            Image = new byte[] { 35, 234, 222, 150, 156, 227, 0, 174, 238, 192, 96, 162, 55, 243, 168, 242, 173, 49, 31, 4, 142, 252, 46, 42, 90, 136, 160, 97, 212, 55, 181, 108, 151, 64, 228, 252, 207, 173, 221, 41, 116, 96, 103, 218, 63, 18, 205, 114, 122, 243, 25, 199, 81, 254, 180, 38, 187, 180, 60, 19, 67, 159, 217, 182, 10, 244, 11, 246, 15, 172, 34, 255, 84, 246, 144, 46, 149, 83, 235, 71, 187, 45, 230, 224, 29, 237, 27, 152, 140, 189, 64, 27, 113, 202, 230, 213, 135, 176, 207, 74 },
                            IsDeleted = false,
                            Name = "Tulip green",
                            Price = 23.38763864775543m,
                            TypeId = 2,
                            UpdatedAt = new DateTime(2024, 11, 13, 9, 13, 56, 335, DateTimeKind.Utc).AddTicks(8295)
                        },
                        new
                        {
                            Id = 12,
                            AvailableQuantity = 12,
                            Color = "pink",
                            CreatedAt = new DateTime(2024, 8, 13, 17, 43, 36, 980, DateTimeKind.Utc).AddTicks(8707),
                            Image = new byte[] { 6, 12, 222, 98, 131, 75, 154, 30, 97, 67, 248, 159, 172, 68, 133, 235, 137, 147, 232, 168, 17, 34, 111, 116, 230, 112, 251, 244, 39, 217, 77, 14, 52, 176, 6, 110, 41, 242, 60, 154, 101, 151, 207, 231, 122, 29, 247, 226, 127, 39, 64, 145, 76, 154, 68, 228, 156, 106, 123, 18, 80, 165, 247, 136, 245, 234, 106, 252, 62, 22, 194, 151, 86, 77, 66, 122, 82, 135, 249, 201, 120, 25, 117, 255, 152, 188, 193, 154, 108, 34, 209, 191, 118, 42, 74, 191, 159, 70, 241, 144 },
                            IsDeleted = false,
                            Name = "Orchid pink",
                            Price = 8.638050181156997m,
                            TypeId = 3,
                            UpdatedAt = new DateTime(2024, 11, 8, 2, 27, 11, 134, DateTimeKind.Utc).AddTicks(9878)
                        },
                        new
                        {
                            Id = 13,
                            AvailableQuantity = 33,
                            Color = "orchid",
                            CreatedAt = new DateTime(2024, 4, 12, 18, 19, 20, 752, DateTimeKind.Utc).AddTicks(8354),
                            Image = new byte[] { 234, 45, 221, 45, 106, 180, 51, 143, 213, 199, 144, 156, 34, 149, 97, 229, 101, 246, 176, 75, 148, 71, 176, 189, 115, 88, 86, 135, 121, 123, 230, 176, 210, 32, 40, 225, 131, 54, 156, 11, 85, 206, 55, 244, 181, 40, 33, 81, 132, 92, 103, 90, 71, 55, 212, 162, 125, 31, 186, 18, 93, 171, 22, 90, 225, 223, 201, 2, 108, 127, 97, 47, 89, 164, 245, 198, 16, 187, 8, 74, 54, 5, 3, 29, 19, 139, 104, 155, 75, 134, 99, 99, 123, 138, 174, 169, 184, 221, 19, 213 },
                            IsDeleted = false,
                            Name = "Tulip orchid",
                            Price = 42.888461714558515m,
                            TypeId = 2,
                            UpdatedAt = new DateTime(2024, 11, 2, 19, 40, 25, 934, DateTimeKind.Utc).AddTicks(1456)
                        },
                        new
                        {
                            Id = 14,
                            AvailableQuantity = 55,
                            Color = "azure",
                            CreatedAt = new DateTime(2023, 12, 11, 19, 55, 4, 524, DateTimeKind.Utc).AddTicks(7999),
                            Image = new byte[] { 205, 79, 221, 249, 81, 28, 205, 0, 73, 74, 39, 152, 151, 229, 61, 222, 65, 88, 120, 238, 24, 109, 240, 7, 255, 64, 178, 27, 203, 29, 126, 82, 112, 143, 74, 83, 221, 122, 252, 124, 70, 5, 160, 1, 240, 52, 76, 193, 136, 144, 142, 35, 66, 211, 100, 95, 94, 213, 250, 17, 106, 178, 52, 43, 204, 213, 40, 7, 154, 233, 1, 199, 92, 251, 168, 18, 205, 239, 22, 203, 244, 241, 146, 59, 142, 90, 15, 156, 43, 234, 245, 7, 128, 234, 18, 147, 208, 116, 53, 27 },
                            IsDeleted = false,
                            Name = "Rose azure",
                            Price = 28.138873247960082m,
                            TypeId = 1,
                            UpdatedAt = new DateTime(2024, 11, 11, 12, 53, 40, 733, DateTimeKind.Utc).AddTicks(3034)
                        },
                        new
                        {
                            Id = 15,
                            AvailableQuantity = 76,
                            Color = "teal",
                            CreatedAt = new DateTime(2024, 8, 10, 19, 30, 48, 296, DateTimeKind.Utc).AddTicks(7643),
                            Image = new byte[] { 176, 113, 220, 196, 56, 132, 103, 113, 188, 206, 191, 149, 13, 54, 25, 216, 29, 186, 64, 146, 155, 147, 49, 80, 139, 40, 13, 174, 30, 191, 22, 244, 14, 255, 108, 198, 55, 190, 91, 237, 54, 60, 8, 14, 43, 63, 118, 48, 141, 196, 182, 237, 61, 111, 244, 29, 63, 139, 57, 16, 119, 184, 82, 253, 183, 203, 134, 13, 201, 82, 161, 94, 94, 82, 91, 95, 138, 35, 37, 76, 178, 221, 32, 89, 9, 41, 182, 158, 11, 79, 134, 171, 133, 75, 118, 125, 233, 10, 87, 96 },
                            IsDeleted = false,
                            Name = "Tulip teal",
                            Price = 13.3892847813616m,
                            TypeId = 2,
                            UpdatedAt = new DateTime(2024, 11, 6, 6, 6, 55, 532, DateTimeKind.Utc).AddTicks(4610)
                        },
                        new
                        {
                            Id = 16,
                            AvailableQuantity = 98,
                            Color = "tan",
                            CreatedAt = new DateTime(2024, 4, 9, 20, 6, 32, 68, DateTimeKind.Utc).AddTicks(7298),
                            Image = new byte[] { 148, 147, 220, 144, 31, 237, 1, 225, 48, 81, 87, 146, 130, 134, 245, 209, 249, 28, 8, 53, 30, 184, 114, 154, 23, 15, 105, 65, 112, 97, 175, 150, 172, 111, 143, 57, 144, 3, 187, 95, 39, 114, 112, 27, 102, 74, 160, 159, 146, 248, 221, 182, 56, 12, 132, 219, 32, 65, 120, 15, 132, 191, 113, 207, 162, 192, 229, 19, 247, 188, 64, 246, 97, 169, 14, 171, 72, 86, 51, 205, 111, 201, 175, 119, 131, 248, 93, 159, 234, 179, 24, 79, 138, 171, 219, 103, 1, 161, 121, 165 },
                            IsDeleted = false,
                            Name = "Rose tan",
                            Price = 47.639696314763118m,
                            TypeId = 1,
                            UpdatedAt = new DateTime(2024, 10, 31, 23, 20, 10, 331, DateTimeKind.Utc).AddTicks(6198)
                        },
                        new
                        {
                            Id = 17,
                            AvailableQuantity = 18,
                            Color = "indigo",
                            CreatedAt = new DateTime(2023, 12, 8, 21, 42, 15, 840, DateTimeKind.Utc).AddTicks(6946),
                            Image = new byte[] { 119, 181, 219, 91, 7, 85, 154, 82, 164, 213, 238, 142, 248, 215, 209, 202, 214, 127, 208, 216, 161, 222, 179, 228, 164, 247, 196, 212, 195, 3, 71, 56, 74, 222, 177, 171, 234, 71, 26, 208, 23, 169, 217, 40, 161, 85, 202, 15, 150, 44, 4, 127, 51, 168, 20, 153, 1, 247, 183, 15, 145, 197, 143, 160, 141, 182, 68, 25, 38, 37, 224, 142, 100, 0, 193, 247, 5, 138, 66, 78, 45, 181, 61, 150, 254, 199, 4, 161, 202, 23, 169, 243, 143, 11, 63, 81, 26, 56, 154, 235 },
                            IsDeleted = false,
                            Name = "Tulip indigo",
                            Price = 32.890107848164685m,
                            TypeId = 2,
                            UpdatedAt = new DateTime(2024, 11, 9, 16, 33, 25, 130, DateTimeKind.Utc).AddTicks(7777)
                        },
                        new
                        {
                            Id = 18,
                            AvailableQuantity = 40,
                            Color = "yellow",
                            CreatedAt = new DateTime(2024, 8, 7, 21, 17, 59, 612, DateTimeKind.Utc).AddTicks(6590),
                            Image = new byte[] { 91, 215, 218, 39, 238, 189, 52, 195, 24, 88, 134, 139, 109, 40, 173, 196, 178, 225, 153, 124, 36, 4, 244, 45, 48, 223, 31, 104, 21, 165, 223, 218, 231, 78, 211, 30, 68, 139, 122, 65, 8, 224, 65, 53, 220, 96, 244, 126, 155, 97, 43, 72, 47, 69, 164, 87, 226, 173, 246, 14, 158, 204, 173, 114, 120, 172, 163, 30, 84, 142, 127, 38, 102, 87, 115, 67, 194, 190, 80, 207, 235, 161, 204, 180, 121, 151, 171, 162, 169, 124, 59, 151, 148, 107, 163, 60, 50, 206, 188, 48 },
                            IsDeleted = false,
                            Name = "Rose yellow",
                            Price = 18.140519381566203m,
                            TypeId = 1,
                            UpdatedAt = new DateTime(2024, 11, 4, 9, 46, 39, 929, DateTimeKind.Utc).AddTicks(9354)
                        },
                        new
                        {
                            Id = 19,
                            AvailableQuantity = 61,
                            Color = "maroon",
                            CreatedAt = new DateTime(2024, 4, 6, 21, 53, 43, 384, DateTimeKind.Utc).AddTicks(6238),
                            Image = new byte[] { 62, 249, 218, 242, 213, 38, 206, 52, 139, 220, 30, 135, 226, 120, 137, 189, 142, 67, 97, 31, 167, 41, 53, 119, 188, 199, 123, 251, 103, 71, 120, 124, 133, 190, 245, 144, 158, 207, 217, 178, 248, 23, 169, 66, 24, 107, 30, 238, 160, 149, 82, 18, 42, 225, 53, 21, 195, 98, 54, 13, 171, 210, 204, 68, 100, 161, 2, 36, 131, 248, 31, 190, 105, 174, 38, 144, 127, 242, 95, 81, 168, 140, 91, 210, 244, 102, 82, 164, 137, 224, 204, 59, 153, 204, 7, 38, 75, 101, 222, 118 },
                            IsDeleted = false,
                            Name = "Tulip maroon",
                            Price = 3.3909309149677553m,
                            TypeId = 2,
                            UpdatedAt = new DateTime(2024, 11, 13, 2, 59, 54, 729, DateTimeKind.Utc).AddTicks(934)
                        },
                        new
                        {
                            Id = 20,
                            AvailableQuantity = 83,
                            Color = "magenta",
                            CreatedAt = new DateTime(2023, 12, 5, 23, 29, 27, 156, DateTimeKind.Utc).AddTicks(5883),
                            Image = new byte[] { 34, 27, 217, 190, 188, 142, 104, 165, 255, 95, 181, 132, 88, 201, 101, 183, 106, 165, 41, 195, 42, 79, 118, 193, 73, 175, 214, 142, 186, 233, 16, 30, 35, 46, 23, 3, 247, 20, 57, 35, 233, 78, 18, 79, 83, 118, 72, 93, 165, 201, 122, 219, 37, 125, 197, 210, 164, 24, 117, 13, 184, 217, 234, 21, 79, 151, 96, 42, 177, 97, 191, 86, 108, 5, 217, 220, 61, 38, 109, 210, 102, 120, 233, 240, 111, 53, 249, 165, 104, 68, 94, 223, 158, 44, 107, 16, 99, 252, 0, 187 },
                            IsDeleted = false,
                            Name = "Rose magenta",
                            Price = 37.641342448369288m,
                            TypeId = 1,
                            UpdatedAt = new DateTime(2024, 11, 7, 20, 13, 9, 528, DateTimeKind.Utc).AddTicks(2512)
                        },
                        new
                        {
                            Id = 21,
                            AvailableQuantity = 4,
                            Color = "silver",
                            CreatedAt = new DateTime(2024, 8, 4, 23, 5, 10, 928, DateTimeKind.Utc).AddTicks(5527),
                            Image = new byte[] { 5, 60, 217, 137, 163, 247, 1, 21, 115, 227, 77, 129, 205, 26, 65, 176, 70, 8, 241, 102, 173, 117, 182, 10, 213, 150, 49, 33, 12, 139, 168, 192, 193, 157, 57, 117, 81, 88, 153, 148, 217, 133, 122, 92, 142, 129, 114, 205, 169, 253, 161, 164, 32, 26, 85, 144, 133, 206, 180, 12, 197, 223, 9, 231, 58, 141, 191, 47, 224, 203, 94, 238, 110, 92, 140, 40, 250, 90, 124, 83, 36, 100, 120, 14, 234, 4, 160, 167, 72, 169, 239, 131, 163, 140, 207, 250, 124, 146, 34, 1 },
                            IsDeleted = false,
                            Name = "Orchid silver",
                            Price = 22.891753981770806m,
                            TypeId = 3,
                            UpdatedAt = new DateTime(2024, 11, 2, 13, 26, 24, 327, DateTimeKind.Utc).AddTicks(4087)
                        },
                        new
                        {
                            Id = 22,
                            AvailableQuantity = 25,
                            Color = "black",
                            CreatedAt = new DateTime(2024, 4, 3, 23, 40, 54, 700, DateTimeKind.Utc).AddTicks(5173),
                            Image = new byte[] { 233, 94, 216, 85, 138, 95, 155, 134, 230, 102, 229, 125, 67, 106, 29, 169, 34, 106, 185, 9, 48, 154, 247, 84, 97, 126, 141, 181, 95, 45, 65, 98, 95, 13, 92, 232, 171, 156, 248, 5, 202, 188, 226, 105, 201, 141, 156, 60, 174, 49, 200, 109, 27, 182, 229, 78, 102, 132, 243, 11, 210, 230, 39, 185, 37, 130, 30, 53, 14, 52, 254, 133, 113, 179, 63, 116, 183, 142, 139, 212, 225, 80, 6, 45, 100, 211, 71, 168, 39, 13, 129, 38, 168, 236, 51, 228, 148, 41, 68, 70 },
                            IsDeleted = false,
                            Name = "Rose black",
                            Price = 8.142165515172373m,
                            TypeId = 1,
                            UpdatedAt = new DateTime(2024, 11, 11, 6, 39, 39, 126, DateTimeKind.Utc).AddTicks(5666)
                        },
                        new
                        {
                            Id = 23,
                            AvailableQuantity = 47,
                            Color = "salmon",
                            CreatedAt = new DateTime(2023, 12, 3, 1, 16, 38, 472, DateTimeKind.Utc).AddTicks(4822),
                            Image = new byte[] { 204, 128, 216, 32, 113, 199, 53, 247, 90, 234, 125, 122, 184, 187, 249, 163, 254, 204, 129, 173, 179, 192, 56, 157, 237, 102, 232, 72, 177, 207, 217, 4, 253, 125, 126, 91, 5, 225, 88, 118, 187, 243, 75, 118, 4, 152, 199, 172, 179, 102, 239, 55, 22, 82, 117, 12, 71, 58, 51, 11, 223, 236, 69, 138, 16, 120, 125, 59, 60, 158, 158, 29, 116, 11, 242, 192, 117, 193, 153, 85, 159, 60, 149, 75, 223, 162, 238, 170, 7, 114, 19, 202, 174, 77, 151, 206, 173, 192, 102, 140 },
                            IsDeleted = false,
                            Name = "Orchid salmon",
                            Price = 42.392577048573891m,
                            TypeId = 3,
                            UpdatedAt = new DateTime(2024, 11, 5, 23, 52, 53, 925, DateTimeKind.Utc).AddTicks(7246)
                        },
                        new
                        {
                            Id = 24,
                            AvailableQuantity = 68,
                            Color = "fuchsia",
                            CreatedAt = new DateTime(2024, 8, 2, 0, 52, 22, 244, DateTimeKind.Utc).AddTicks(4474),
                            Image = new byte[] { 176, 162, 215, 236, 88, 48, 206, 104, 206, 109, 20, 119, 45, 11, 213, 156, 219, 46, 74, 80, 55, 229, 121, 231, 122, 78, 68, 219, 3, 113, 114, 166, 154, 236, 160, 205, 94, 37, 183, 231, 171, 41, 179, 131, 63, 163, 241, 27, 184, 154, 23, 0, 17, 239, 5, 202, 40, 240, 114, 10, 236, 243, 100, 92, 251, 109, 220, 65, 107, 7, 61, 181, 118, 98, 164, 13, 50, 245, 168, 214, 93, 40, 35, 105, 90, 113, 148, 171, 231, 214, 164, 110, 179, 173, 251, 184, 197, 86, 135, 209 },
                            IsDeleted = false,
                            Name = "Rose fuchsia",
                            Price = 27.642988581975458m,
                            TypeId = 1,
                            UpdatedAt = new DateTime(2024, 10, 31, 17, 6, 8, 724, DateTimeKind.Utc).AddTicks(8832)
                        },
                        new
                        {
                            Id = 25,
                            AvailableQuantity = 90,
                            Color = "purple",
                            CreatedAt = new DateTime(2024, 4, 1, 1, 28, 6, 16, DateTimeKind.Utc).AddTicks(4232),
                            Image = new byte[] { 147, 196, 215, 183, 64, 152, 104, 216, 65, 241, 172, 115, 163, 92, 177, 149, 183, 144, 18, 243, 186, 11, 186, 49, 6, 54, 159, 111, 86, 19, 10, 72, 56, 92, 194, 64, 184, 105, 23, 89, 156, 96, 27, 144, 122, 174, 27, 138, 188, 206, 62, 201, 12, 139, 149, 135, 9, 165, 177, 9, 249, 249, 130, 46, 231, 99, 58, 70, 153, 113, 221, 77, 121, 185, 87, 89, 239, 41, 182, 87, 26, 20, 178, 135, 213, 64, 59, 173, 198, 58, 54, 18, 184, 13, 96, 162, 222, 237, 169, 22 },
                            IsDeleted = false,
                            Name = "Orchid purple",
                            Price = 12.893400115376976m,
                            TypeId = 3,
                            UpdatedAt = new DateTime(2024, 11, 9, 10, 19, 23, 524, DateTimeKind.Utc).AddTicks(532)
                        },
                        new
                        {
                            Id = 26,
                            AvailableQuantity = 10,
                            Color = "violet",
                            CreatedAt = new DateTime(2023, 11, 30, 3, 3, 49, 788, DateTimeKind.Utc).AddTicks(3909),
                            Image = new byte[] { 118, 230, 214, 131, 39, 0, 2, 73, 181, 116, 68, 112, 24, 173, 141, 143, 147, 243, 218, 151, 61, 49, 251, 122, 146, 30, 250, 2, 168, 181, 162, 234, 214, 204, 228, 178, 18, 173, 118, 202, 140, 151, 132, 157, 181, 185, 69, 250, 193, 2, 101, 147, 8, 39, 37, 69, 234, 91, 240, 9, 6, 0, 161, 255, 210, 89, 153, 76, 200, 218, 124, 229, 124, 16, 10, 165, 173, 93, 197, 217, 216, 0, 64, 165, 80, 15, 226, 174, 166, 159, 199, 182, 189, 109, 196, 140, 246, 132, 203, 92 },
                            IsDeleted = false,
                            Name = "Rose violet",
                            Price = 47.143811648778543m,
                            TypeId = 1,
                            UpdatedAt = new DateTime(2024, 11, 4, 3, 32, 38, 323, DateTimeKind.Utc).AddTicks(2131)
                        },
                        new
                        {
                            Id = 27,
                            AvailableQuantity = 32,
                            Color = "lime",
                            CreatedAt = new DateTime(2024, 7, 30, 2, 39, 33, 560, DateTimeKind.Utc).AddTicks(3554),
                            Image = new byte[] { 90, 8, 214, 78, 14, 105, 156, 186, 41, 248, 219, 108, 142, 253, 105, 136, 111, 85, 162, 58, 192, 86, 60, 196, 31, 5, 86, 149, 251, 87, 59, 140, 116, 59, 6, 37, 108, 242, 214, 59, 125, 206, 236, 170, 240, 196, 111, 105, 198, 54, 140, 92, 3, 196, 181, 3, 204, 17, 47, 8, 19, 6, 191, 209, 189, 78, 248, 82, 246, 68, 28, 125, 126, 103, 189, 241, 106, 145, 211, 90, 150, 236, 207, 196, 203, 222, 137, 176, 133, 3, 89, 90, 194, 206, 40, 118, 15, 26, 237, 161 },
                            IsDeleted = false,
                            Name = "Orchid lime",
                            Price = 32.394223182180061m,
                            TypeId = 3,
                            UpdatedAt = new DateTime(2024, 11, 12, 20, 45, 53, 122, DateTimeKind.Utc).AddTicks(3709)
                        },
                        new
                        {
                            Id = 28,
                            AvailableQuantity = 53,
                            Color = "green",
                            CreatedAt = new DateTime(2024, 3, 29, 4, 15, 17, 332, DateTimeKind.Utc).AddTicks(3201),
                            Image = new byte[] { 61, 42, 213, 26, 245, 209, 53, 43, 156, 124, 115, 105, 3, 78, 69, 130, 75, 183, 106, 221, 67, 124, 125, 14, 171, 237, 177, 40, 77, 249, 211, 46, 18, 171, 41, 151, 198, 54, 54, 172, 109, 5, 84, 183, 43, 207, 153, 217, 202, 107, 179, 37, 254, 96, 70, 193, 173, 199, 111, 7, 32, 13, 221, 163, 168, 68, 87, 88, 37, 173, 188, 21, 129, 190, 112, 61, 39, 197, 226, 219, 83, 216, 93, 226, 69, 173, 48, 177, 101, 103, 234, 254, 199, 46, 140, 96, 39, 177, 15, 231 },
                            IsDeleted = false,
                            Name = "Tulip green",
                            Price = 17.644634715581628m,
                            TypeId = 2,
                            UpdatedAt = new DateTime(2024, 11, 7, 13, 59, 7, 921, DateTimeKind.Utc).AddTicks(5286)
                        },
                        new
                        {
                            Id = 29,
                            AvailableQuantity = 75,
                            Color = "pink",
                            CreatedAt = new DateTime(2023, 11, 27, 4, 51, 1, 104, DateTimeKind.Utc).AddTicks(2849),
                            Image = new byte[] { 33, 75, 212, 229, 220, 57, 207, 156, 16, 255, 11, 102, 121, 158, 33, 123, 39, 25, 50, 129, 198, 162, 189, 87, 55, 213, 12, 188, 159, 155, 107, 209, 176, 27, 75, 10, 31, 122, 149, 29, 94, 60, 189, 196, 102, 219, 195, 72, 207, 159, 219, 238, 249, 252, 214, 127, 142, 125, 174, 7, 45, 19, 252, 116, 147, 58, 182, 93, 83, 23, 91, 172, 132, 21, 34, 138, 228, 248, 240, 92, 17, 196, 236, 0, 192, 124, 215, 179, 68, 204, 124, 162, 204, 142, 240, 74, 64, 72, 49, 44 },
                            IsDeleted = false,
                            Name = "Orchid pink",
                            Price = 2.895046248983146m,
                            TypeId = 3,
                            UpdatedAt = new DateTime(2024, 11, 2, 7, 12, 22, 720, DateTimeKind.Utc).AddTicks(6866)
                        },
                        new
                        {
                            Id = 30,
                            AvailableQuantity = 97,
                            Color = "orchid",
                            CreatedAt = new DateTime(2024, 7, 27, 4, 26, 44, 876, DateTimeKind.Utc).AddTicks(2494),
                            Image = new byte[] { 4, 109, 212, 177, 195, 162, 105, 12, 132, 131, 162, 98, 238, 239, 253, 116, 3, 124, 251, 36, 73, 199, 254, 161, 195, 189, 104, 79, 242, 61, 4, 115, 77, 138, 109, 124, 121, 191, 245, 142, 78, 115, 37, 209, 162, 230, 237, 184, 212, 211, 2, 184, 244, 153, 102, 60, 111, 51, 237, 6, 58, 26, 26, 70, 126, 47, 20, 99, 130, 128, 251, 68, 134, 108, 213, 214, 162, 44, 255, 221, 207, 176, 122, 30, 59, 75, 126, 180, 36, 48, 13, 70, 209, 238, 84, 52, 88, 223, 82, 114 },
                            IsDeleted = false,
                            Name = "Tulip orchid",
                            Price = 37.145457782384664m,
                            TypeId = 2,
                            UpdatedAt = new DateTime(2024, 11, 11, 0, 25, 37, 519, DateTimeKind.Utc).AddTicks(8445)
                        });
                });

            modelBuilder.Entity("DAL.Entities.FlowerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_flower_types");

                    b.ToTable("flower_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Rose"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tulip"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Orchid"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("delivery_address");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivery_date");

                    b.Property<decimal>("DeliveryPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("delivery_price");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_method");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("NUMERIC(10, 2)")
                        .HasColumnName("total_price");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_orders_status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.ToTable("orders", null, t =>
                        {
                            t.HasCheckConstraint("CK_Order_PaymentMethod", "payment_method IN ('Card', 'Cash on Delivery')");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Cumque hic explicabo neque eum quibusdam ipsum autem.",
                            CreatedAt = new DateTime(2024, 7, 25, 0, 9, 23, 949, DateTimeKind.Utc).AddTicks(5296),
                            DeliveryAddress = "1602 Fidel Village, Port Marisol, Niue",
                            DeliveryDate = new DateTime(2033, 5, 9, 7, 35, 17, 161, DateTimeKind.Utc).AddTicks(5197),
                            DeliveryPrice = 244.165126338678080m,
                            PaymentMethod = "Cash on Delivery",
                            Status = "Pending",
                            TotalPrice = 256.379024542579053m,
                            UpdatedAt = new DateTime(2024, 11, 2, 23, 18, 43, 126, DateTimeKind.Utc).AddTicks(1261),
                            UserId = 8
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Vitae laboriosam sit.",
                            CreatedAt = new DateTime(2024, 2, 20, 19, 57, 40, 973, DateTimeKind.Utc).AddTicks(3559),
                            DeliveryAddress = "20700 Princess Lock, Georgianaburgh, Philippines",
                            DeliveryDate = new DateTime(2031, 12, 7, 4, 14, 48, 691, DateTimeKind.Utc).AddTicks(6824),
                            DeliveryPrice = 99.679361767917440m,
                            PaymentMethod = "Cash on Delivery",
                            Status = "Processing",
                            TotalPrice = 579.217377156120161m,
                            UpdatedAt = new DateTime(2024, 11, 1, 22, 48, 33, 69, DateTimeKind.Utc).AddTicks(7955),
                            UserId = 24
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Voluptatum numquam qui et vitae asperiores blanditiis excepturi unde.",
                            CreatedAt = new DateTime(2024, 6, 30, 0, 51, 28, 392, DateTimeKind.Utc).AddTicks(9162),
                            DeliveryAddress = "3358 Demarco Village, Alexanderton, Trinidad and Tobago",
                            DeliveryDate = new DateTime(2028, 7, 29, 1, 33, 21, 654, DateTimeKind.Utc).AddTicks(4352),
                            DeliveryPrice = 435.193597197157280m,
                            PaymentMethod = "Cash on Delivery",
                            Status = "Shipped",
                            TotalPrice = 2148.641203010752669m,
                            UpdatedAt = new DateTime(2024, 11, 7, 12, 47, 38, 837, DateTimeKind.Utc).AddTicks(2839),
                            UserId = 9
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Ut eum libero et sunt aspernatur quis dolorem et.",
                            CreatedAt = new DateTime(2024, 7, 26, 17, 15, 54, 551, DateTimeKind.Utc).AddTicks(2087),
                            DeliveryAddress = "47253 Maxime Locks, Oswaldomouth, Mali",
                            DeliveryDate = new DateTime(2039, 2, 17, 20, 12, 46, 556, DateTimeKind.Utc).AddTicks(7051),
                            DeliveryPrice = 290.707832626396640m,
                            PaymentMethod = "Cash on Delivery",
                            Status = "Delivered",
                            TotalPrice = 619.6142055460318053m,
                            UpdatedAt = new DateTime(2024, 11, 5, 4, 48, 2, 845, DateTimeKind.Utc).AddTicks(4017),
                            UserId = 25
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Deleniti architecto quo dolor consectetur.",
                            CreatedAt = new DateTime(2024, 2, 16, 20, 22, 18, 492, DateTimeKind.Utc).AddTicks(6823),
                            DeliveryAddress = "5193 Corkery Village, North Jaylanland, Venezuela",
                            DeliveryDate = new DateTime(2027, 9, 25, 3, 11, 45, 489, DateTimeKind.Utc).AddTicks(2179),
                            DeliveryPrice = 146.222068055636480m,
                            PaymentMethod = "Cash on Delivery",
                            Status = "Processing",
                            TotalPrice = 152.905340592798677m,
                            UpdatedAt = new DateTime(2024, 11, 11, 5, 36, 50, 844, DateTimeKind.Utc).AddTicks(6759),
                            UserId = 11
                        },
                        new
                        {
                            Id = 6,
                            Comment = "Quidem laborum voluptatem consequatur magni quis eum explicabo ea.",
                            CreatedAt = new DateTime(2024, 8, 31, 18, 5, 34, 858, DateTimeKind.Utc).AddTicks(8170),
                            DeliveryAddress = "747 Mertz Locks, Lake Landenville, San Marino",
                            DeliveryDate = new DateTime(2036, 5, 28, 16, 30, 28, 393, DateTimeKind.Utc).AddTicks(7633),
                            DeliveryPrice = 481.736303484875840m,
                            PaymentMethod = "Cash on Delivery",
                            Status = "Shipped",
                            TotalPrice = 2278.605754973649484m,
                            UpdatedAt = new DateTime(2024, 11, 1, 16, 59, 29, 954, DateTimeKind.Utc).AddTicks(6044),
                            UserId = 26
                        },
                        new
                        {
                            Id = 7,
                            Comment = "Accusantium placeat error quia deleniti iure doloremque tenetur accusantium.",
                            CreatedAt = new DateTime(2024, 5, 22, 15, 50, 17, 14, DateTimeKind.Utc).AddTicks(1169),
                            DeliveryAddress = "8849 Baumbach Villages, North Shanny, India",
                            DeliveryDate = new DateTime(2049, 1, 6, 14, 29, 30, 640, DateTimeKind.Utc).AddTicks(2068),
                            DeliveryPrice = 337.25053891411520m,
                            PaymentMethod = "Card",
                            Status = "Delivered",
                            TotalPrice = 337.25053891411520m,
                            UpdatedAt = new DateTime(2024, 11, 4, 10, 23, 26, 993, DateTimeKind.Utc).AddTicks(7108),
                            UserId = 12
                        },
                        new
                        {
                            Id = 8,
                            Comment = "Saepe velit aut consequatur nisi eum atque tempore vel facilis.",
                            CreatedAt = new DateTime(2024, 2, 11, 14, 34, 59, 169, DateTimeKind.Utc).AddTicks(4159),
                            DeliveryAddress = "921 Kuhn Locks, Brennastad, Moldova",
                            DeliveryDate = new DateTime(2025, 9, 1, 4, 29, 5, 288, DateTimeKind.Utc).AddTicks(316),
                            DeliveryPrice = 192.764774343355040m,
                            PaymentMethod = "Card",
                            Status = "Pending",
                            TotalPrice = 1017.464431365702097m,
                            UpdatedAt = new DateTime(2024, 11, 7, 3, 47, 24, 32, DateTimeKind.Utc).AddTicks(8163),
                            UserId = 28
                        },
                        new
                        {
                            Id = 9,
                            Comment = "Illo excepturi dolor.",
                            CreatedAt = new DateTime(2024, 4, 15, 10, 37, 10, 63, DateTimeKind.Utc).AddTicks(8377),
                            DeliveryAddress = "05948 Trevion Ville, East Macfurt, Micronesia",
                            DeliveryDate = new DateTime(2052, 6, 29, 19, 37, 48, 696, DateTimeKind.Utc).AddTicks(5904),
                            DeliveryPrice = 48.2790097725945440m,
                            PaymentMethod = "Cash on Delivery",
                            Status = "Processing",
                            TotalPrice = 260.2306914223499640m,
                            UpdatedAt = new DateTime(2024, 11, 10, 2, 1, 57, 491, DateTimeKind.Utc).AddTicks(5354),
                            UserId = 13
                        },
                        new
                        {
                            Id = 10,
                            Comment = "Hic amet ratione corporis.",
                            CreatedAt = new DateTime(2024, 3, 9, 21, 34, 50, 570, DateTimeKind.Utc).AddTicks(9183),
                            DeliveryAddress = "296 Gerson Lodge, South Margarete, Wallis and Futuna",
                            DeliveryDate = new DateTime(2033, 2, 19, 23, 30, 24, 894, DateTimeKind.Utc).AddTicks(8825),
                            DeliveryPrice = 383.793245201834240m,
                            PaymentMethod = "Card",
                            Status = "Delivered",
                            TotalPrice = 722.933861590425368m,
                            UpdatedAt = new DateTime(2024, 11, 7, 3, 5, 7, 119, DateTimeKind.Utc).AddTicks(3265),
                            UserId = 29
                        },
                        new
                        {
                            Id = 11,
                            Comment = "Unde pariatur officiis omnis animi.",
                            CreatedAt = new DateTime(2024, 6, 24, 4, 29, 59, 176, DateTimeKind.Utc).AddTicks(915),
                            DeliveryAddress = "33301 Roberta Vista, New Stellaport, Slovenia",
                            DeliveryDate = new DateTime(2054, 2, 13, 1, 55, 15, 267, DateTimeKind.Utc).AddTicks(9316),
                            DeliveryPrice = 239.30748063107360m,
                            PaymentMethod = "Cash on Delivery",
                            Status = "Pending",
                            TotalPrice = 2265.0377384741036573m,
                            UpdatedAt = new DateTime(2024, 11, 7, 10, 44, 17, 153, DateTimeKind.Utc).AddTicks(3961),
                            UserId = 15
                        },
                        new
                        {
                            Id = 12,
                            Comment = "Sapiente velit autem.",
                            CreatedAt = new DateTime(2024, 11, 7, 4, 30, 2, 492, DateTimeKind.Utc).AddTicks(215),
                            DeliveryAddress = "4618 Easton Lodge, Ratkebury, Madagascar",
                            DeliveryDate = new DateTime(2052, 1, 26, 23, 24, 41, 872, DateTimeKind.Utc).AddTicks(4107),
                            DeliveryPrice = 94.821716060313440m,
                            PaymentMethod = "Card",
                            Status = "Processing",
                            TotalPrice = 1882.584693859604332m,
                            UpdatedAt = new DateTime(2024, 11, 11, 8, 19, 29, 568, DateTimeKind.Utc).AddTicks(1096),
                            UserId = 30
                        },
                        new
                        {
                            Id = 13,
                            Comment = "Eaque consectetur sunt aut necessitatibus aut quod.",
                            CreatedAt = new DateTime(2024, 9, 25, 2, 18, 29, 945, DateTimeKind.Utc).AddTicks(9056),
                            DeliveryAddress = "50865 Renner Vista, North Callieborough, Austria",
                            DeliveryDate = new DateTime(2025, 9, 29, 6, 12, 41, 839, DateTimeKind.Utc).AddTicks(2729),
                            DeliveryPrice = 430.335951489552800m,
                            PaymentMethod = "Card",
                            Status = "Shipped",
                            TotalPrice = 935.106600338177433m,
                            UpdatedAt = new DateTime(2024, 11, 6, 18, 47, 9, 228, DateTimeKind.Utc).AddTicks(3390),
                            UserId = 16
                        },
                        new
                        {
                            Id = 14,
                            Comment = "Id cum veniam.",
                            CreatedAt = new DateTime(2024, 7, 6, 10, 25, 14, 413, DateTimeKind.Utc).AddTicks(1247),
                            DeliveryAddress = "7463 Daugherty Lodge, Lake Oswald, Samoa",
                            DeliveryDate = new DateTime(2047, 4, 17, 16, 22, 46, 365, DateTimeKind.Utc).AddTicks(2917),
                            DeliveryPrice = 285.850186918792640m,
                            PaymentMethod = "Cash on Delivery",
                            Status = "Delivered",
                            TotalPrice = 305.438252678345308m,
                            UpdatedAt = new DateTime(2024, 11, 1, 13, 33, 52, 16, DateTimeKind.Utc).AddTicks(8930),
                            UserId = 2
                        },
                        new
                        {
                            Id = 15,
                            Comment = "Quia consequatur non.",
                            CreatedAt = new DateTime(2024, 5, 5, 13, 52, 50, 373, DateTimeKind.Utc).AddTicks(6855),
                            DeliveryAddress = "883 Murazik Vista, Port Dorcasport, Iceland",
                            DeliveryDate = new DateTime(2029, 11, 26, 14, 21, 48, 611, DateTimeKind.Utc).AddTicks(7384),
                            DeliveryPrice = 141.3644223480320m,
                            PaymentMethod = "Card",
                            Status = "Pending",
                            TotalPrice = 234.904545688957212m,
                            UpdatedAt = new DateTime(2024, 11, 10, 16, 11, 3, 241, DateTimeKind.Utc).AddTicks(2951),
                            UserId = 17
                        },
                        new
                        {
                            Id = 16,
                            Comment = "Molestias earum est.",
                            CreatedAt = new DateTime(2024, 3, 4, 18, 20, 26, 334, DateTimeKind.Utc).AddTicks(2407),
                            DeliveryAddress = "9109 Blanda Loop, Pedroville, Angola",
                            DeliveryDate = new DateTime(2042, 7, 7, 10, 20, 50, 858, DateTimeKind.Utc).AddTicks(1848),
                            DeliveryPrice = 476.878657777271360m,
                            PaymentMethod = "Cash on Delivery",
                            Status = "Shipped",
                            TotalPrice = 841.481172668039924m,
                            UpdatedAt = new DateTime(2024, 11, 5, 18, 48, 14, 465, DateTimeKind.Utc).AddTicks(6891),
                            UserId = 3
                        },
                        new
                        {
                            Id = 17,
                            Comment = "Eos eveniet architecto sit et ut consequatur.",
                            CreatedAt = new DateTime(2024, 5, 29, 22, 44, 13, 331, DateTimeKind.Utc).AddTicks(7781),
                            DeliveryAddress = "058 Juana Walk, Emmanuelburgh, Thailand",
                            DeliveryDate = new DateTime(2044, 4, 15, 1, 35, 3, 518, DateTimeKind.Utc).AddTicks(8679),
                            DeliveryPrice = 332.392893206511200m,
                            PaymentMethod = "Card",
                            Status = "Delivered",
                            TotalPrice = 2056.127596815642040m,
                            UpdatedAt = new DateTime(2024, 11, 6, 19, 2, 30, 442, DateTimeKind.Utc).AddTicks(6042),
                            UserId = 19
                        },
                        new
                        {
                            Id = 18,
                            Comment = "Quia voluptatem aperiam voluptatem laudantium.",
                            CreatedAt = new DateTime(2024, 10, 7, 13, 1, 2, 901, DateTimeKind.Utc).AddTicks(7074),
                            DeliveryAddress = "29550 Wallace Mall, McCulloughburgh, Israel",
                            DeliveryDate = new DateTime(2029, 7, 13, 10, 58, 31, 611, DateTimeKind.Utc).AddTicks(8592),
                            DeliveryPrice = 187.907128635750560m,
                            PaymentMethod = "Card",
                            Status = "Pending",
                            TotalPrice = 199.556445728780799m,
                            UpdatedAt = new DateTime(2024, 11, 8, 18, 9, 38, 742, DateTimeKind.Utc).AddTicks(4368),
                            UserId = 4
                        },
                        new
                        {
                            Id = 19,
                            Comment = "Consectetur tempore nisi molestias sed libero natus maxime enim.",
                            CreatedAt = new DateTime(2024, 5, 30, 0, 42, 10, 545, DateTimeKind.Utc).AddTicks(1269),
                            DeliveryAddress = "322 Heather Walks, New Filiberto, Falkland Islands (Malvinas)",
                            DeliveryDate = new DateTime(2051, 10, 4, 19, 36, 23, 125, DateTimeKind.Utc).AddTicks(7353),
                            DeliveryPrice = 43.4213640649902560m,
                            PaymentMethod = "Cash on Delivery",
                            Status = "Processing",
                            TotalPrice = 52.0594142461472530m,
                            UpdatedAt = new DateTime(2024, 11, 3, 8, 46, 32, 807, DateTimeKind.Utc).AddTicks(3136),
                            UserId = 20
                        },
                        new
                        {
                            Id = 20,
                            Comment = "Voluptatum facere quis.",
                            CreatedAt = new DateTime(2024, 11, 7, 8, 11, 8, 554, DateTimeKind.Utc).AddTicks(5287),
                            DeliveryAddress = "46003 Sandra Manor, Wunschport, Estonia",
                            DeliveryDate = new DateTime(2036, 9, 24, 2, 56, 29, 476, DateTimeKind.Utc).AddTicks(9012),
                            DeliveryPrice = 378.935599494229760m,
                            PaymentMethod = "Card",
                            Status = "Shipped",
                            TotalPrice = 1042.191632507924240m,
                            UpdatedAt = new DateTime(2024, 11, 5, 6, 4, 14, 271, DateTimeKind.Utc).AddTicks(9478),
                            UserId = 6
                        },
                        new
                        {
                            Id = 21,
                            Comment = "Dolore ducimus est.",
                            CreatedAt = new DateTime(2024, 11, 14, 10, 46, 26, 732, DateTimeKind.Utc).AddTicks(8218),
                            DeliveryAddress = "507 Halvorson Walks, Bernhardbury, Palestinian Territory",
                            DeliveryDate = new DateTime(2029, 3, 25, 13, 37, 42, 732, DateTimeKind.Utc).AddTicks(5957),
                            DeliveryPrice = 234.449834923469120m,
                            PaymentMethod = "Cash on Delivery",
                            Status = "Delivered",
                            TotalPrice = 234.449834923469120m,
                            UpdatedAt = new DateTime(2024, 11, 6, 22, 4, 15, 773, DateTimeKind.Utc).AddTicks(5661),
                            UserId = 21
                        },
                        new
                        {
                            Id = 22,
                            Comment = "Quod dolore impedit porro vero cum pariatur voluptatem fuga.",
                            CreatedAt = new DateTime(2024, 1, 27, 1, 14, 58, 370, DateTimeKind.Utc).AddTicks(301),
                            DeliveryAddress = "63467 Runolfsdottir Manor, Homenickmouth, Bosnia and Herzegovina",
                            DeliveryDate = new DateTime(2043, 12, 6, 19, 54, 27, 341, DateTimeKind.Utc).AddTicks(9178),
                            DeliveryPrice = 89.964070352708960m,
                            PaymentMethod = "Card",
                            Status = "Processing",
                            TotalPrice = 116.2588932981057571m,
                            UpdatedAt = new DateTime(2024, 11, 10, 4, 0, 49, 712, DateTimeKind.Utc).AddTicks(8002),
                            UserId = 7
                        },
                        new
                        {
                            Id = 23,
                            Comment = "Eius officiis quos debitis et.",
                            CreatedAt = new DateTime(2023, 12, 1, 7, 16, 7, 831, DateTimeKind.Utc).AddTicks(1641),
                            DeliveryAddress = "8724 Ebert Wall, South Arnaldo, Hungary",
                            DeliveryDate = new DateTime(2040, 10, 15, 13, 14, 6, 583, DateTimeKind.Utc).AddTicks(2942),
                            DeliveryPrice = 425.478305781948320m,
                            PaymentMethod = "Card",
                            Status = "Shipped",
                            TotalPrice = 999.727208581625481m,
                            UpdatedAt = new DateTime(2024, 11, 10, 0, 29, 59, 119, DateTimeKind.Utc).AddTicks(5166),
                            UserId = 23
                        },
                        new
                        {
                            Id = 24,
                            Comment = "Consequatur id quae esse ab sapiente similique.",
                            CreatedAt = new DateTime(2024, 4, 24, 3, 31, 16, 821, DateTimeKind.Utc).AddTicks(6664),
                            DeliveryAddress = "91921 Okuneva Manors, Sauertown, Uruguay",
                            DeliveryDate = new DateTime(2051, 2, 17, 11, 52, 25, 206, DateTimeKind.Utc).AddTicks(9356),
                            DeliveryPrice = 280.992541211188160m,
                            PaymentMethod = "Card",
                            Status = "Delivered",
                            TotalPrice = 2423.389736727061848m,
                            UpdatedAt = new DateTime(2024, 11, 12, 0, 44, 16, 607, DateTimeKind.Utc).AddTicks(6278),
                            UserId = 8
                        },
                        new
                        {
                            Id = 25,
                            Comment = "Asperiores eos voluptatibus eius voluptas.",
                            CreatedAt = new DateTime(2024, 9, 20, 12, 30, 16, 83, DateTimeKind.Utc).AddTicks(6320),
                            DeliveryAddress = "0479 Berenice Way, Kreigerport, Nicaragua",
                            DeliveryDate = new DateTime(2036, 1, 5, 8, 12, 11, 76, DateTimeKind.Utc).AddTicks(1737),
                            DeliveryPrice = 136.506776640427520m,
                            PaymentMethod = "Card",
                            Status = "Pending",
                            TotalPrice = 635.164434279857154m,
                            UpdatedAt = new DateTime(2024, 11, 6, 0, 16, 50, 780, DateTimeKind.Utc).AddTicks(6496),
                            UserId = 24
                        },
                        new
                        {
                            Id = 26,
                            Comment = "Vel eum enim.",
                            CreatedAt = new DateTime(2024, 8, 23, 10, 35, 10, 809, DateTimeKind.Utc).AddTicks(7404),
                            DeliveryAddress = "184 Kaylee Meadow, Lakinshire, Christmas Island",
                            DeliveryDate = new DateTime(2032, 11, 27, 23, 41, 1, 749, DateTimeKind.Utc).AddTicks(7167),
                            DeliveryPrice = 472.021012069667360m,
                            PaymentMethod = "Cash on Delivery",
                            Status = "Processing",
                            TotalPrice = 2176.250908438698116m,
                            UpdatedAt = new DateTime(2024, 11, 9, 2, 8, 33, 471, DateTimeKind.Utc).AddTicks(550),
                            UserId = 10
                        },
                        new
                        {
                            Id = 27,
                            Comment = "Ea rem iste laudantium ut saepe ratione esse consequatur.",
                            CreatedAt = new DateTime(2024, 1, 17, 5, 51, 22, 764, DateTimeKind.Utc).AddTicks(1315),
                            DeliveryAddress = "3215 Abe Ways, South Shannahaven, Cote d'Ivoire",
                            DeliveryDate = new DateTime(2046, 12, 6, 11, 49, 22, 4, DateTimeKind.Utc).AddTicks(4608),
                            DeliveryPrice = 327.535247498906720m,
                            PaymentMethod = "Card",
                            Status = "Shipped",
                            TotalPrice = 971.203214753048532m,
                            UpdatedAt = new DateTime(2024, 11, 12, 7, 47, 42, 731, DateTimeKind.Utc).AddTicks(5062),
                            UserId = 25
                        },
                        new
                        {
                            Id = 28,
                            Comment = "Iusto sequi sed porro est.",
                            CreatedAt = new DateTime(2024, 1, 21, 10, 57, 7, 479, DateTimeKind.Utc).AddTicks(4672),
                            DeliveryAddress = "459 Ivory Meadows, Port Alfredo, Moldova",
                            DeliveryDate = new DateTime(2040, 5, 18, 16, 42, 21, 356, DateTimeKind.Utc).AddTicks(5667),
                            DeliveryPrice = 183.049482928146560m,
                            PaymentMethod = "Cash on Delivery",
                            Status = "Pending",
                            TotalPrice = 397.4385629237811502m,
                            UpdatedAt = new DateTime(2024, 11, 8, 6, 37, 52, 583, DateTimeKind.Utc).AddTicks(9883),
                            UserId = 11
                        },
                        new
                        {
                            Id = 29,
                            Comment = "Libero sapiente saepe neque ut dolor et.",
                            CreatedAt = new DateTime(2024, 3, 19, 7, 20, 23, 98, DateTimeKind.Utc).AddTicks(2010),
                            DeliveryAddress = "59615 Tromp Ways, Earleneland, Australia",
                            DeliveryDate = new DateTime(2054, 2, 17, 3, 47, 19, 869, DateTimeKind.Utc).AddTicks(4786),
                            DeliveryPrice = 38.563718357385920m,
                            PaymentMethod = "Card",
                            Status = "Processing",
                            TotalPrice = 1496.736712452833385m,
                            UpdatedAt = new DateTime(2024, 11, 6, 16, 42, 0, 407, DateTimeKind.Utc).AddTicks(9380),
                            UserId = 27
                        },
                        new
                        {
                            Id = 30,
                            Comment = "Corrupti non et quia veritatis excepturi rerum.",
                            CreatedAt = new DateTime(2024, 1, 18, 17, 22, 57, 740, DateTimeKind.Utc).AddTicks(8014),
                            DeliveryAddress = "633 Heidenreich Meadows, Gerholdton, Wallis and Futuna",
                            DeliveryDate = new DateTime(2047, 11, 7, 11, 43, 40, 963, DateTimeKind.Utc).AddTicks(4143),
                            DeliveryPrice = 374.077953786625280m,
                            PaymentMethod = "Card",
                            Status = "Shipped",
                            TotalPrice = 374.077953786625280m,
                            UpdatedAt = new DateTime(2024, 11, 4, 7, 35, 18, 340, DateTimeKind.Utc).AddTicks(3628),
                            UserId = 12
                        });
                });

            modelBuilder.Entity("DAL.Entities.OrderAddOn", b =>
                {
                    b.Property<int>("OrderBouquetId")
                        .HasColumnType("integer")
                        .HasColumnName("order_bouquet_id");

                    b.Property<int>("AddOnId")
                        .HasColumnType("integer")
                        .HasColumnName("add_on_id");

                    b.Property<string>("CardNote")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("card_note");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("OrderBouquetId", "AddOnId")
                        .HasName("pk_order_add_ons");

                    b.HasIndex("AddOnId")
                        .HasDatabaseName("ix_order_add_ons_add_on_id");

                    b.ToTable("order_add_ons", (string)null);

                    b.HasData(
                        new
                        {
                            OrderBouquetId = 13,
                            AddOnId = 11,
                            CardNote = "Aut totam est expedita.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 23,
                            AddOnId = 1,
                            CardNote = "Ea dolorem maiores aut nemo et dignissimos tempora aut.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 8,
                            AddOnId = 29,
                            CardNote = "Optio et velit natus dolor.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 8,
                            AddOnId = 18,
                            CardNote = "Doloribus error velit aut illo optio ducimus rem placeat.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 5,
                            AddOnId = 29,
                            CardNote = "Veniam voluptatem fuga laudantium non.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 22,
                            AddOnId = 5,
                            CardNote = "In sapiente quo repudiandae et deserunt qui quisquam corrupti.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 29,
                            AddOnId = 26,
                            CardNote = "Accusamus distinctio illo consequatur cum ipsa.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 22,
                            AddOnId = 4,
                            CardNote = "Dolorem ea ut illum unde quos blanditiis delectus modi amet.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 29,
                            AddOnId = 3,
                            CardNote = "Praesentium inventore deleniti enim nihil itaque.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 9,
                            AddOnId = 16,
                            CardNote = "Facere possimus eligendi quisquam ullam iure praesentium numquam sapiente distinctio.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 29,
                            AddOnId = 11,
                            CardNote = "Quae blanditiis et ipsum ipsum fugiat.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 26,
                            AddOnId = 27,
                            CardNote = "Laboriosam sequi sed fuga quae veniam laudantium laudantium optio dolores.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 18,
                            AddOnId = 3,
                            CardNote = "Harum at sit architecto sint qui delectus.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 16,
                            AddOnId = 24,
                            CardNote = "Molestiae omnis unde.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 25,
                            AddOnId = 25,
                            CardNote = "Eius magnam omnis reiciendis libero et delectus.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 13,
                            AddOnId = 17,
                            CardNote = "Excepturi tenetur aut.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 3,
                            AddOnId = 17,
                            CardNote = "Aut et amet aut esse cupiditate ut.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 9,
                            AddOnId = 30,
                            CardNote = "Aspernatur aliquid in sit.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 9,
                            AddOnId = 9,
                            CardNote = "Reprehenderit ab laborum repellendus neque quam aut voluptas.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 2,
                            AddOnId = 27,
                            CardNote = "Nobis placeat dolorem ut.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 1,
                            AddOnId = 23,
                            CardNote = "Reiciendis ducimus ipsa est voluptates ipsam reiciendis in.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 24,
                            AddOnId = 23,
                            CardNote = "Enim ratione aliquam eos.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 23,
                            AddOnId = 8,
                            CardNote = "Error nulla totam officia expedita non voluptatibus qui.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 20,
                            AddOnId = 15,
                            CardNote = "Vero perspiciatis soluta ipsa provident.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 22,
                            AddOnId = 30,
                            CardNote = "Sequi et saepe quos voluptate odit maiores quasi quos.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 17,
                            AddOnId = 15,
                            CardNote = "Ducimus earum odit rerum minima.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 6,
                            AddOnId = 17,
                            CardNote = "Quod rerum voluptatem qui sequi alias maiores voluptatem incidunt.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 14,
                            AddOnId = 15,
                            CardNote = "Aperiam laboriosam sed pariatur accusantium.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 4,
                            AddOnId = 18,
                            CardNote = "Voluptas eaque placeat ullam ut ut doloribus error delectus expedita.",
                            Quantity = 0
                        },
                        new
                        {
                            OrderBouquetId = 15,
                            AddOnId = 21,
                            CardNote = "Dolorum id sapiente placeat omnis ut.",
                            Quantity = 0
                        });
                });

            modelBuilder.Entity("DAL.Entities.OrderBouquet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BouquetId")
                        .HasColumnType("integer")
                        .HasColumnName("bouquet_id");

                    b.Property<int?>("CustomBouquetId")
                        .HasColumnType("integer")
                        .HasColumnName("custom_bouquet_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("NUMERIC(10, 2)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_order_bouquets");

                    b.HasIndex("BouquetId")
                        .HasDatabaseName("ix_order_bouquets_bouquet_id");

                    b.HasIndex("CustomBouquetId")
                        .HasDatabaseName("ix_order_bouquets_custom_bouquet_id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_bouquets_order_id");

                    b.ToTable("order_bouquets", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BouquetId = 15,
                            OrderId = 8,
                            Price = 0m,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 2,
                            BouquetId = 5,
                            OrderId = 24,
                            Price = 0m,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 3,
                            CustomBouquetId = 26,
                            OrderId = 9,
                            Price = 0m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 4,
                            CustomBouquetId = 17,
                            OrderId = 25,
                            Price = 0m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 5,
                            BouquetId = 8,
                            OrderId = 11,
                            Price = 0m,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 6,
                            CustomBouquetId = 29,
                            OrderId = 26,
                            Price = 0m,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 7,
                            CustomBouquetId = 20,
                            OrderId = 12,
                            Price = 0m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 8,
                            BouquetId = 11,
                            OrderId = 28,
                            Price = 0m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 9,
                            BouquetId = 2,
                            OrderId = 13,
                            Price = 0m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 10,
                            CustomBouquetId = 23,
                            OrderId = 29,
                            Price = 0m,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 11,
                            BouquetId = 14,
                            OrderId = 15,
                            Price = 0m,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 12,
                            BouquetId = 5,
                            OrderId = 30,
                            Price = 0m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 13,
                            CustomBouquetId = 26,
                            OrderId = 16,
                            Price = 0m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 14,
                            CustomBouquetId = 17,
                            OrderId = 2,
                            Price = 0m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 15,
                            BouquetId = 8,
                            OrderId = 17,
                            Price = 0m,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 16,
                            CustomBouquetId = 29,
                            OrderId = 3,
                            Price = 0m,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 17,
                            CustomBouquetId = 20,
                            OrderId = 19,
                            Price = 0m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 18,
                            BouquetId = 11,
                            OrderId = 4,
                            Price = 0m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 19,
                            BouquetId = 2,
                            OrderId = 20,
                            Price = 0m,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 20,
                            CustomBouquetId = 23,
                            OrderId = 6,
                            Price = 0m,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 21,
                            CustomBouquetId = 14,
                            OrderId = 21,
                            Price = 0m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 22,
                            BouquetId = 5,
                            OrderId = 7,
                            Price = 0m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 23,
                            CustomBouquetId = 26,
                            OrderId = 23,
                            Price = 0m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 24,
                            CustomBouquetId = 17,
                            OrderId = 8,
                            Price = 0m,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 25,
                            BouquetId = 8,
                            OrderId = 24,
                            Price = 0m,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 26,
                            BouquetId = 29,
                            OrderId = 10,
                            Price = 0m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 27,
                            CustomBouquetId = 20,
                            OrderId = 25,
                            Price = 0m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 28,
                            BouquetId = 11,
                            OrderId = 11,
                            Price = 0m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 29,
                            BouquetId = 2,
                            OrderId = 27,
                            Price = 0m,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 30,
                            CustomBouquetId = 23,
                            OrderId = 12,
                            Price = 0m,
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("DAL.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("NUMERIC(10, 2)")
                        .HasColumnName("amount");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_method");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("transaction_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasDatabaseName("ix_payments_order_id");

                    b.ToTable("payments", null, t =>
                        {
                            t.HasCheckConstraint("CK_Payment_PaymentMethod", "payment_method IN ('Card', 'Cash on Delivery')");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 139.360920395404640m,
                            OrderId = 23,
                            PaymentMethod = "Card",
                            Status = "Completed",
                            TransactionDate = new DateTime(2024, 10, 22, 7, 17, 40, 436, DateTimeKind.Utc).AddTicks(6426)
                        },
                        new
                        {
                            Id = 2,
                            Amount = 390.125071206188480m,
                            OrderId = 27,
                            PaymentMethod = "Card",
                            Status = "Pending",
                            TransactionDate = new DateTime(2024, 10, 15, 21, 36, 56, 360, DateTimeKind.Utc).AddTicks(6495)
                        },
                        new
                        {
                            Id = 3,
                            Amount = 160.889222016972320m,
                            OrderId = 20,
                            PaymentMethod = "Cash on Delivery",
                            Status = "Failed",
                            TransactionDate = new DateTime(2024, 11, 8, 12, 56, 12, 284, DateTimeKind.Utc).AddTicks(5787)
                        },
                        new
                        {
                            Id = 4,
                            Amount = 411.653372827755680m,
                            OrderId = 18,
                            PaymentMethod = "Cash on Delivery",
                            Status = "Completed",
                            TransactionDate = new DateTime(2024, 11, 2, 3, 15, 28, 208, DateTimeKind.Utc).AddTicks(5058)
                        },
                        new
                        {
                            Id = 5,
                            Amount = 182.417523638539520m,
                            OrderId = 24,
                            PaymentMethod = "Card",
                            Status = "Pending",
                            TransactionDate = new DateTime(2024, 10, 26, 16, 34, 44, 132, DateTimeKind.Utc).AddTicks(4329)
                        },
                        new
                        {
                            Id = 6,
                            Amount = 433.181674449323360m,
                            OrderId = 29,
                            PaymentMethod = "Cash on Delivery",
                            Status = "Failed",
                            TransactionDate = new DateTime(2024, 10, 20, 6, 54, 0, 56, DateTimeKind.Utc).AddTicks(3609)
                        },
                        new
                        {
                            Id = 7,
                            Amount = 203.94582526010720m,
                            OrderId = 15,
                            PaymentMethod = "Cash on Delivery",
                            Status = "Completed",
                            TransactionDate = new DateTime(2024, 11, 12, 22, 13, 15, 980, DateTimeKind.Utc).AddTicks(2881)
                        },
                        new
                        {
                            Id = 8,
                            Amount = 454.709976070891040m,
                            OrderId = 12,
                            PaymentMethod = "Card",
                            Status = "Completed",
                            TransactionDate = new DateTime(2024, 11, 6, 12, 32, 31, 904, DateTimeKind.Utc).AddTicks(2149)
                        },
                        new
                        {
                            Id = 9,
                            Amount = 225.474126881674880m,
                            OrderId = 17,
                            PaymentMethod = "Card",
                            Status = "Pending",
                            TransactionDate = new DateTime(2024, 10, 31, 2, 51, 47, 828, DateTimeKind.Utc).AddTicks(1418)
                        },
                        new
                        {
                            Id = 10,
                            Amount = 476.238277692458720m,
                            OrderId = 22,
                            PaymentMethod = "Cash on Delivery",
                            Status = "Failed",
                            TransactionDate = new DateTime(2024, 10, 24, 16, 11, 3, 752, DateTimeKind.Utc).AddTicks(687)
                        },
                        new
                        {
                            Id = 11,
                            Amount = 247.002428503242560m,
                            OrderId = 7,
                            PaymentMethod = "Card",
                            Status = "Completed",
                            TransactionDate = new DateTime(2024, 10, 18, 6, 30, 19, 675, DateTimeKind.Utc).AddTicks(9954)
                        },
                        new
                        {
                            Id = 12,
                            Amount = 497.766579314026400m,
                            OrderId = 30,
                            PaymentMethod = "Card",
                            Status = "Pending",
                            TransactionDate = new DateTime(2024, 11, 10, 21, 49, 35, 599, DateTimeKind.Utc).AddTicks(9222)
                        },
                        new
                        {
                            Id = 13,
                            Amount = 268.530730124810240m,
                            OrderId = 25,
                            PaymentMethod = "Cash on Delivery",
                            Status = "Failed",
                            TransactionDate = new DateTime(2024, 11, 4, 12, 8, 51, 523, DateTimeKind.Utc).AddTicks(8490)
                        },
                        new
                        {
                            Id = 14,
                            Amount = 39.2948809355939360m,
                            OrderId = 13,
                            PaymentMethod = "Cash on Delivery",
                            Status = "Completed",
                            TransactionDate = new DateTime(2024, 10, 29, 2, 28, 7, 447, DateTimeKind.Utc).AddTicks(7758)
                        },
                        new
                        {
                            Id = 15,
                            Amount = 290.059031746377920m,
                            OrderId = 8,
                            PaymentMethod = "Card",
                            Status = "Pending",
                            TransactionDate = new DateTime(2024, 10, 22, 15, 47, 23, 371, DateTimeKind.Utc).AddTicks(7025)
                        },
                        new
                        {
                            Id = 16,
                            Amount = 60.8231825571615200m,
                            OrderId = 10,
                            PaymentMethod = "Cash on Delivery",
                            Status = "Failed",
                            TransactionDate = new DateTime(2024, 10, 16, 6, 6, 39, 295, DateTimeKind.Utc).AddTicks(6291)
                        });
                });

            modelBuilder.Entity("DAL.Entities.ShoppingCart", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId")
                        .HasName("pk_shopping_carts");

                    b.ToTable("shopping_carts", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 23,
                            CreatedAt = new DateTime(2024, 8, 15, 10, 32, 40, 874, DateTimeKind.Utc).AddTicks(8662),
                            UpdatedAt = new DateTime(2024, 11, 12, 22, 38, 22, 395, DateTimeKind.Utc).AddTicks(7308)
                        },
                        new
                        {
                            UserId = 18,
                            CreatedAt = new DateTime(2024, 2, 6, 6, 33, 38, 619, DateTimeKind.Utc).AddTicks(4750),
                            UpdatedAt = new DateTime(2024, 11, 8, 20, 3, 3, 235, DateTimeKind.Utc).AddTicks(9047)
                        },
                        new
                        {
                            UserId = 24,
                            CreatedAt = new DateTime(2024, 7, 30, 0, 34, 36, 364, DateTimeKind.Utc).AddTicks(659),
                            UpdatedAt = new DateTime(2024, 11, 4, 17, 27, 44, 76, DateTimeKind.Utc).AddTicks(727)
                        },
                        new
                        {
                            UserId = 30,
                            CreatedAt = new DateTime(2024, 1, 20, 20, 35, 34, 108, DateTimeKind.Utc).AddTicks(6561),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 52, 24, 916, DateTimeKind.Utc).AddTicks(2404)
                        },
                        new
                        {
                            UserId = 9,
                            CreatedAt = new DateTime(2024, 7, 13, 14, 36, 31, 853, DateTimeKind.Utc).AddTicks(2463),
                            UpdatedAt = new DateTime(2024, 11, 10, 12, 17, 5, 756, DateTimeKind.Utc).AddTicks(4081)
                        },
                        new
                        {
                            UserId = 26,
                            CreatedAt = new DateTime(2024, 1, 4, 10, 37, 29, 597, DateTimeKind.Utc).AddTicks(8364),
                            UpdatedAt = new DateTime(2024, 11, 6, 9, 41, 46, 596, DateTimeKind.Utc).AddTicks(5755)
                        },
                        new
                        {
                            UserId = 17,
                            CreatedAt = new DateTime(2024, 6, 27, 4, 38, 27, 342, DateTimeKind.Utc).AddTicks(4264),
                            UpdatedAt = new DateTime(2024, 11, 2, 7, 6, 27, 436, DateTimeKind.Utc).AddTicks(7431)
                        },
                        new
                        {
                            UserId = 25,
                            CreatedAt = new DateTime(2023, 12, 19, 0, 39, 25, 87, DateTimeKind.Utc).AddTicks(163),
                            UpdatedAt = new DateTime(2024, 11, 12, 4, 31, 8, 276, DateTimeKind.Utc).AddTicks(9105)
                        },
                        new
                        {
                            UserId = 20,
                            CreatedAt = new DateTime(2024, 6, 10, 18, 40, 22, 831, DateTimeKind.Utc).AddTicks(6063),
                            UpdatedAt = new DateTime(2024, 11, 8, 1, 55, 49, 117, DateTimeKind.Utc).AddTicks(780)
                        },
                        new
                        {
                            UserId = 21,
                            CreatedAt = new DateTime(2023, 12, 2, 14, 41, 20, 576, DateTimeKind.Utc).AddTicks(1962),
                            UpdatedAt = new DateTime(2024, 11, 3, 23, 20, 29, 957, DateTimeKind.Utc).AddTicks(2454)
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("User")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 3, 12, 7, 5, 14, 460, DateTimeKind.Utc).AddTicks(859),
                            Email = "Bernita_Konopelski43@gmail.com",
                            FirstName = "Pedro",
                            LastName = "Hackett",
                            PasswordHash = "Ay7ZbbzDk0",
                            PhoneNumber = "976-609-8805 x52963",
                            Role = "User",
                            UpdatedAt = new DateTime(2024, 11, 5, 0, 14, 57, 422, DateTimeKind.Utc).AddTicks(8997)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 8, 10, 2, 27, 5, 875, DateTimeKind.Utc).AddTicks(9147),
                            Email = "Guillermo.Cummerata30@hotmail.com",
                            FirstName = "Sonya",
                            LastName = "Schulist",
                            PasswordHash = "lJ5hPDb6ee",
                            PhoneNumber = "(969) 291-0386 x7600",
                            Role = "User",
                            UpdatedAt = new DateTime(2024, 11, 7, 11, 55, 25, 30, DateTimeKind.Utc).AddTicks(4380)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 5, 14, 3, 43, 15, 939, DateTimeKind.Utc).AddTicks(4202),
                            Email = "Max56@gmail.com",
                            FirstName = "Nils",
                            LastName = "Kreiger",
                            PasswordHash = "17yADOlbuq",
                            PhoneNumber = "609-545-5342",
                            Role = "User",
                            UpdatedAt = new DateTime(2024, 11, 13, 14, 25, 39, 461, DateTimeKind.Utc).AddTicks(6301)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 10, 31, 1, 39, 17, 304, DateTimeKind.Utc).AddTicks(7188),
                            Email = "Yoshiko.Maggio@hotmail.com",
                            FirstName = "Karina",
                            LastName = "Krajcik",
                            PasswordHash = "bJLg6XDTjR",
                            PhoneNumber = "886.440.0316 x3659",
                            Role = "User",
                            UpdatedAt = new DateTime(2024, 11, 1, 9, 14, 50, 879, DateTimeKind.Utc).AddTicks(4670)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 9, 2, 11, 18, 27, 798, DateTimeKind.Utc).AddTicks(2070),
                            Email = "Edd.Gislason@yahoo.com",
                            FirstName = "Clare",
                            LastName = "Roberts",
                            PasswordHash = "xzXCMm7Moj",
                            PhoneNumber = "810-973-1391",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2024, 11, 3, 8, 14, 7, 507, DateTimeKind.Utc).AddTicks(7334)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 11, 6, 1, 53, 25, 940, DateTimeKind.Utc).AddTicks(8265),
                            Email = "Kobe_Windler80@hotmail.com",
                            FirstName = "Micheal",
                            LastName = "Spencer",
                            PasswordHash = "XJdNcgX1iD",
                            PhoneNumber = "601-423-0429 x4071",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2024, 11, 14, 11, 41, 5, 434, DateTimeKind.Utc).AddTicks(3259)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 1, 16, 3, 19, 26, 111, DateTimeKind.Utc).AddTicks(5686),
                            Email = "Sasha36@yahoo.com",
                            FirstName = "Albina",
                            LastName = "Rogahn",
                            PasswordHash = "zpqJxJsFlr",
                            PhoneNumber = "330.590.4772 x110",
                            Role = "User",
                            UpdatedAt = new DateTime(2024, 11, 12, 8, 56, 48, 452, DateTimeKind.Utc).AddTicks(5981)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 2, 27, 11, 28, 38, 700, DateTimeKind.Utc).AddTicks(9715),
                            Email = "Casimir81@hotmail.com",
                            FirstName = "Hans",
                            LastName = "Thompson",
                            PasswordHash = "TNK51cW5zt",
                            PhoneNumber = "446-886-7515 x51416",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2024, 11, 7, 11, 53, 23, 696, DateTimeKind.Utc).AddTicks(1774)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 5, 10, 3, 32, 7, 389, DateTimeKind.Utc).AddTicks(5376),
                            Email = "Jada.Beer@yahoo.com",
                            FirstName = "Adolphus",
                            LastName = "Bednar",
                            PasswordHash = "HyzXwNmVwk",
                            PhoneNumber = "1-336-620-3589 x271",
                            Role = "User",
                            UpdatedAt = new DateTime(2024, 11, 2, 2, 41, 17, 138, DateTimeKind.Utc).AddTicks(5821)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 5, 17, 13, 42, 3, 898, DateTimeKind.Utc).AddTicks(3334),
                            Email = "Neva_Rosenbaum29@hotmail.com",
                            FirstName = "Shawn",
                            LastName = "Hagenes",
                            PasswordHash = "DK4P_2z1QR",
                            PhoneNumber = "1-932-211-3106",
                            Role = "User",
                            UpdatedAt = new DateTime(2024, 11, 2, 17, 28, 0, 559, DateTimeKind.Utc).AddTicks(7228)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 2, 5, 22, 17, 47, 376, DateTimeKind.Utc).AddTicks(1215),
                            Email = "Alvera.Koch17@yahoo.com",
                            FirstName = "Sebastian",
                            LastName = "Sanford",
                            PasswordHash = "oE22uNmVSp",
                            PhoneNumber = "559-623-7242 x1822",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2024, 11, 8, 17, 13, 31, 913, DateTimeKind.Utc).AddTicks(725)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 8, 2, 20, 48, 13, 359, DateTimeKind.Utc).AddTicks(43),
                            Email = "Eula62@hotmail.com",
                            FirstName = "Abby",
                            LastName = "Willms",
                            PasswordHash = "KKboscDQvI",
                            PhoneNumber = "828-222-1876 x612",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2024, 10, 31, 21, 43, 57, 509, DateTimeKind.Utc).AddTicks(9806)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 4, 24, 15, 20, 56, 484, DateTimeKind.Utc).AddTicks(6346),
                            Email = "Lonnie7@yahoo.com",
                            FirstName = "Kieran",
                            LastName = "Wiza",
                            PasswordHash = "weWrZV6AS1",
                            PhoneNumber = "(215) 798-5313 x72534",
                            Role = "User",
                            UpdatedAt = new DateTime(2024, 11, 4, 1, 40, 10, 102, DateTimeKind.Utc).AddTicks(4936)
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 7, 13, 4, 23, 45, 508, DateTimeKind.Utc).AddTicks(841),
                            Email = "Tiana_Lueilwitz@gmail.com",
                            FirstName = "Omari",
                            LastName = "Rogahn",
                            PasswordHash = "k0LcIYE8gj",
                            PhoneNumber = "(262) 739-0593 x4331",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2024, 11, 7, 1, 22, 0, 949, DateTimeKind.Utc).AddTicks(4153)
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 4, 7, 13, 49, 18, 64, DateTimeKind.Utc).AddTicks(9612),
                            Email = "Dagmar_Funk66@yahoo.com",
                            FirstName = "Dora",
                            LastName = "Dach",
                            PasswordHash = "ol0y9MElRR",
                            PhoneNumber = "861.974.3384",
                            Role = "User",
                            UpdatedAt = new DateTime(2024, 11, 1, 17, 26, 39, 284, DateTimeKind.Utc).AddTicks(2457)
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 8, 2, 12, 20, 28, 217, DateTimeKind.Utc).AddTicks(3619),
                            Email = "Johnson.Wilderman54@gmail.com",
                            FirstName = "Maurice",
                            LastName = "Mueller",
                            PasswordHash = "Lz0k1WvPyi",
                            PhoneNumber = "(869) 790-6732",
                            Role = "User",
                            UpdatedAt = new DateTime(2024, 11, 10, 12, 5, 39, 721, DateTimeKind.Utc).AddTicks(66)
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 4, 5, 3, 39, 54, 831, DateTimeKind.Utc).AddTicks(1531),
                            Email = "Quinten88@yahoo.com",
                            FirstName = "Jaiden",
                            LastName = "Lubowitz",
                            PasswordHash = "GQSmfsRurB",
                            PhoneNumber = "349-814-5419",
                            Role = "User",
                            UpdatedAt = new DateTime(2024, 11, 6, 17, 2, 48, 731, DateTimeKind.Utc).AddTicks(7894)
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 4, 29, 16, 43, 0, 777, DateTimeKind.Utc).AddTicks(1826),
                            Email = "Aylin.Heller@gmail.com",
                            FirstName = "Diego",
                            LastName = "Barton",
                            PasswordHash = "L3vTQoW9H3",
                            PhoneNumber = "1-548-255-8154",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2024, 11, 1, 7, 46, 49, 585, DateTimeKind.Utc).AddTicks(6355)
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2023, 11, 16, 11, 3, 35, 198, DateTimeKind.Utc).AddTicks(4284),
                            Email = "Giuseppe_Beatty@yahoo.com",
                            FirstName = "Marcia",
                            LastName = "MacGyver",
                            PasswordHash = "GaAupi2_P3",
                            PhoneNumber = "1-473-524-9425 x7357",
                            Role = "User",
                            UpdatedAt = new DateTime(2024, 10, 31, 15, 17, 42, 739, DateTimeKind.Utc).AddTicks(8729)
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 3, 29, 0, 21, 16, 583, DateTimeKind.Utc).AddTicks(2419),
                            Email = "Marley.Rogahn3@gmail.com",
                            FirstName = "Nico",
                            LastName = "Hilpert",
                            PasswordHash = "rMJDsQ9E4M",
                            PhoneNumber = "710-501-5734",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2024, 11, 6, 3, 7, 46, 944, DateTimeKind.Utc).AddTicks(1869)
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 3, 6, 1, 6, 28, 740, DateTimeKind.Utc).AddTicks(3849),
                            Email = "Wilfredo68@hotmail.com",
                            FirstName = "Frida",
                            LastName = "Rosenbaum",
                            PasswordHash = "vVhqEa7JYS",
                            PhoneNumber = "939-799-7596",
                            Role = "User",
                            UpdatedAt = new DateTime(2024, 11, 1, 8, 12, 1, 429, DateTimeKind.Utc).AddTicks(9155)
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 7, 24, 8, 17, 13, 384, DateTimeKind.Utc).AddTicks(7369),
                            Email = "Donny13@gmail.com",
                            FirstName = "Bernie",
                            LastName = "Nicolas",
                            PasswordHash = "jhMbDOgvDi",
                            PhoneNumber = "(827) 778-6836",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2024, 11, 11, 0, 25, 42, 107, DateTimeKind.Utc).AddTicks(8540)
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 10, 25, 3, 32, 12, 298, DateTimeKind.Utc).AddTicks(8665),
                            Email = "Kennedy_Sporer@hotmail.com",
                            FirstName = "Elinore",
                            LastName = "Ernser",
                            PasswordHash = "4ng6HJIER8",
                            PhoneNumber = "(509) 937-9866 x55567",
                            Role = "User",
                            UpdatedAt = new DateTime(2024, 11, 10, 13, 7, 8, 811, DateTimeKind.Utc).AddTicks(8044)
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2024, 6, 27, 0, 2, 12, 587, DateTimeKind.Utc).AddTicks(3768),
                            Email = "Rylee.Little53@gmail.com",
                            FirstName = "America",
                            LastName = "Windler",
                            PasswordHash = "My3zjzsYeG",
                            PhoneNumber = "640.379.5089 x745",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2024, 11, 2, 14, 5, 19, 506, DateTimeKind.Utc).AddTicks(6299)
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2024, 3, 17, 8, 37, 56, 65, DateTimeKind.Utc).AddTicks(1664),
                            Email = "Candelario.Flatley40@hotmail.com",
                            FirstName = "Camila",
                            LastName = "Moen",
                            PasswordHash = "NcmMMCOA4h",
                            PhoneNumber = "324-503-6387 x461",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2024, 11, 8, 13, 50, 50, 859, DateTimeKind.Utc).AddTicks(9810)
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2024, 7, 26, 22, 55, 11, 531, DateTimeKind.Utc).AddTicks(1267),
                            Email = "Isabell94@gmail.com",
                            FirstName = "Bette",
                            LastName = "Homenick",
                            PasswordHash = "TN2qJhP19k",
                            PhoneNumber = "431.322.2770",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2024, 11, 3, 23, 2, 41, 312, DateTimeKind.Utc).AddTicks(434)
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2024, 6, 22, 13, 55, 4, 124, DateTimeKind.Utc).AddTicks(4495),
                            Email = "Myrtle39@hotmail.com",
                            FirstName = "Odessa",
                            LastName = "Jakubowski",
                            PasswordHash = "51S2Qst4eF",
                            PhoneNumber = "(638) 514-0815 x160",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2024, 11, 3, 13, 16, 29, 49, DateTimeKind.Utc).AddTicks(680)
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2024, 5, 29, 0, 6, 31, 195, DateTimeKind.Utc).AddTicks(545),
                            Email = "Alexanne_Hayes@yahoo.com",
                            FirstName = "Carlie",
                            LastName = "Lind",
                            PasswordHash = "JNIXwsWQAI",
                            PhoneNumber = "1-745-800-2658 x5649",
                            Role = "User",
                            UpdatedAt = new DateTime(2024, 11, 12, 13, 24, 57, 266, DateTimeKind.Utc).AddTicks(5261)
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2024, 4, 25, 5, 54, 24, 499, DateTimeKind.Utc).AddTicks(7672),
                            Email = "Erick.Batz90@hotmail.com",
                            FirstName = "Sandra",
                            LastName = "O'Kon",
                            PasswordHash = "uUVTKS_tS0",
                            PhoneNumber = "509.977.0013 x477",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2024, 11, 11, 17, 40, 38, 98, DateTimeKind.Utc).AddTicks(9311)
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2024, 2, 17, 9, 52, 12, 952, DateTimeKind.Utc).AddTicks(816),
                            Email = "Lilian_Rippin77@yahoo.com",
                            FirstName = "Tomas",
                            LastName = "Schmitt",
                            PasswordHash = "ANaEt8hLXN",
                            PhoneNumber = "268-672-8223",
                            Role = "User",
                            UpdatedAt = new DateTime(2024, 11, 12, 20, 10, 57, 540, DateTimeKind.Utc).AddTicks(5550)
                        });
                });

            modelBuilder.Entity("DAL.Entities.AddOn", b =>
                {
                    b.HasOne("DAL.Entities.AddOnType", "Type")
                        .WithMany("AddOn")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_add_ons_add_on_types_type_id");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DAL.Entities.BouquetAddOn", b =>
                {
                    b.HasOne("DAL.Entities.AddOn", "AddOn")
                        .WithMany("BouquetAddOns")
                        .HasForeignKey("AddOnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_bouquet_add_ons_add_ons_add_on_id");

                    b.HasOne("DAL.Entities.Bouquet", "Bouquet")
                        .WithMany("BouquetAddOns")
                        .HasForeignKey("BouquetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_bouquet_add_ons_bouquets_bouquet_id");

                    b.HasOne("DAL.Entities.CustomBouquet", "CustomBouquet")
                        .WithMany("CustomBouquetAddOns")
                        .HasForeignKey("CustomBouquetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_bouquet_add_ons_custom_bouquets_custom_bouquet_id");

                    b.Navigation("AddOn");

                    b.Navigation("Bouquet");

                    b.Navigation("CustomBouquet");
                });

            modelBuilder.Entity("DAL.Entities.BouquetCategoryBouquet", b =>
                {
                    b.HasOne("DAL.Entities.Bouquet", "Bouquet")
                        .WithMany("BouquetCategories")
                        .HasForeignKey("BouquetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bouquet_category_bouquets_bouquets_bouquet_id");

                    b.HasOne("DAL.Entities.BouquetCategory", "Category")
                        .WithMany("Bouquets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bouquet_category_bouquets_bouquet_categories_category_id");

                    b.Navigation("Bouquet");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Entities.BouquetFlower", b =>
                {
                    b.HasOne("DAL.Entities.Bouquet", "Bouquet")
                        .WithMany("BouquetFlowers")
                        .HasForeignKey("BouquetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bouquet_flowers_bouquets_bouquet_id");

                    b.HasOne("DAL.Entities.Flower", "Flower")
                        .WithMany("BouquetFlowers")
                        .HasForeignKey("FlowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bouquet_flowers_flowers_flower_id");

                    b.Navigation("Bouquet");

                    b.Navigation("Flower");
                });

            modelBuilder.Entity("DAL.Entities.CartItem", b =>
                {
                    b.HasOne("DAL.Entities.Bouquet", "Bouquet")
                        .WithMany("CartItems")
                        .HasForeignKey("BouquetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_cart_items_bouquets_bouquet_id");

                    b.HasOne("DAL.Entities.ShoppingCart", "ShoppingCart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cart_items_shopping_carts_cart_id");

                    b.HasOne("DAL.Entities.CustomBouquet", "CustomBouquet")
                        .WithMany("CartItems")
                        .HasForeignKey("CustomBouquetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_cart_items_custom_bouquets_custom_bouquet_id");

                    b.Navigation("Bouquet");

                    b.Navigation("CustomBouquet");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("DAL.Entities.CartItemAddOn", b =>
                {
                    b.HasOne("DAL.Entities.AddOn", "AddOn")
                        .WithMany("CartItems")
                        .HasForeignKey("AddOnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cart_item_add_ons_add_ons_add_on_id");

                    b.HasOne("DAL.Entities.CartItem", "CartItem")
                        .WithMany("AddOns")
                        .HasForeignKey("CartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cart_item_add_ons_cart_items_cart_item_id");

                    b.Navigation("AddOn");

                    b.Navigation("CartItem");
                });

            modelBuilder.Entity("DAL.Entities.CustomBouquet", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("CustomBouquets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_custom_bouquets_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.CustomBouquetFlower", b =>
                {
                    b.HasOne("DAL.Entities.CustomBouquet", "CustomBouquet")
                        .WithMany("CustomBouquetFlowers")
                        .HasForeignKey("CustomBouquetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_custom_bouquet_flowers_custom_bouquets_custom_bouquet_id");

                    b.HasOne("DAL.Entities.Flower", "Flower")
                        .WithMany("CustomBouquetFlowers")
                        .HasForeignKey("FlowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_custom_bouquet_flowers_flowers_flower_id");

                    b.Navigation("CustomBouquet");

                    b.Navigation("Flower");
                });

            modelBuilder.Entity("DAL.Entities.Flower", b =>
                {
                    b.HasOne("DAL.Entities.FlowerType", "Type")
                        .WithMany("Flower")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_flowers_flower_types_type_id");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.OrderAddOn", b =>
                {
                    b.HasOne("DAL.Entities.AddOn", "AddOn")
                        .WithMany("OrderBouquets")
                        .HasForeignKey("AddOnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order_add_ons_add_ons_add_on_id");

                    b.HasOne("DAL.Entities.OrderBouquet", "OrderBouquet")
                        .WithMany("AddOns")
                        .HasForeignKey("OrderBouquetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_add_ons_order_bouquets_order_bouquet_id");

                    b.Navigation("AddOn");

                    b.Navigation("OrderBouquet");
                });

            modelBuilder.Entity("DAL.Entities.OrderBouquet", b =>
                {
                    b.HasOne("DAL.Entities.Bouquet", "Bouquet")
                        .WithMany("OrderBouquets")
                        .HasForeignKey("BouquetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_order_bouquets_bouquets_bouquet_id");

                    b.HasOne("DAL.Entities.CustomBouquet", "CustomBouquet")
                        .WithMany("OrderBouquets")
                        .HasForeignKey("CustomBouquetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_order_bouquets_custom_bouquets_custom_bouquet_id");

                    b.HasOne("DAL.Entities.Order", "Order")
                        .WithMany("OrderBouquets")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_bouquets_orders_order_id");

                    b.Navigation("Bouquet");

                    b.Navigation("CustomBouquet");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DAL.Entities.Payment", b =>
                {
                    b.HasOne("DAL.Entities.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("DAL.Entities.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_payments_orders_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DAL.Entities.ShoppingCart", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("DAL.Entities.ShoppingCart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shopping_carts_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.AddOn", b =>
                {
                    b.Navigation("BouquetAddOns");

                    b.Navigation("CartItems");

                    b.Navigation("OrderBouquets");
                });

            modelBuilder.Entity("DAL.Entities.AddOnType", b =>
                {
                    b.Navigation("AddOn");
                });

            modelBuilder.Entity("DAL.Entities.Bouquet", b =>
                {
                    b.Navigation("BouquetAddOns");

                    b.Navigation("BouquetCategories");

                    b.Navigation("BouquetFlowers");

                    b.Navigation("CartItems");

                    b.Navigation("OrderBouquets");
                });

            modelBuilder.Entity("DAL.Entities.BouquetCategory", b =>
                {
                    b.Navigation("Bouquets");
                });

            modelBuilder.Entity("DAL.Entities.CartItem", b =>
                {
                    b.Navigation("AddOns");
                });

            modelBuilder.Entity("DAL.Entities.CustomBouquet", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("CustomBouquetAddOns");

                    b.Navigation("CustomBouquetFlowers");

                    b.Navigation("OrderBouquets");
                });

            modelBuilder.Entity("DAL.Entities.Flower", b =>
                {
                    b.Navigation("BouquetFlowers");

                    b.Navigation("CustomBouquetFlowers");
                });

            modelBuilder.Entity("DAL.Entities.FlowerType", b =>
                {
                    b.Navigation("Flower");
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.Navigation("OrderBouquets");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("DAL.Entities.OrderBouquet", b =>
                {
                    b.Navigation("AddOns");
                });

            modelBuilder.Entity("DAL.Entities.ShoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("CustomBouquets");

                    b.Navigation("Orders");

                    b.Navigation("ShoppingCart");
                });
#pragma warning restore 612, 618
        }
    }
}
